/*
Spotify Web API

You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the PlaylistTrackObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlaylistTrackObject{}

// PlaylistTrackObject struct for PlaylistTrackObject
type PlaylistTrackObject struct {
	// The date and time the track or episode was added. _**Note**: some very old playlists may return `null` in this field._ 
	AddedAt *time.Time `json:"added_at,omitempty"`
	AddedBy *PlaylistTrackObjectAddedBy `json:"added_by,omitempty"`
	// Whether this track or episode is a [local file](https://developer.spotify.com/web-api/local-files-spotify-playlists/) or not. 
	IsLocal *bool `json:"is_local,omitempty"`
	Track *PlaylistTrackObjectTrack `json:"track,omitempty"`
}

// NewPlaylistTrackObject instantiates a new PlaylistTrackObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlaylistTrackObject() *PlaylistTrackObject {
	this := PlaylistTrackObject{}
	return &this
}

// NewPlaylistTrackObjectWithDefaults instantiates a new PlaylistTrackObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlaylistTrackObjectWithDefaults() *PlaylistTrackObject {
	this := PlaylistTrackObject{}
	return &this
}

// GetAddedAt returns the AddedAt field value if set, zero value otherwise.
func (o *PlaylistTrackObject) GetAddedAt() time.Time {
	if o == nil || isNil(o.AddedAt) {
		var ret time.Time
		return ret
	}
	return *o.AddedAt
}

// GetAddedAtOk returns a tuple with the AddedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaylistTrackObject) GetAddedAtOk() (*time.Time, bool) {
	if o == nil || isNil(o.AddedAt) {
		return nil, false
	}
	return o.AddedAt, true
}

// HasAddedAt returns a boolean if a field has been set.
func (o *PlaylistTrackObject) HasAddedAt() bool {
	if o != nil && !isNil(o.AddedAt) {
		return true
	}

	return false
}

// SetAddedAt gets a reference to the given time.Time and assigns it to the AddedAt field.
func (o *PlaylistTrackObject) SetAddedAt(v time.Time) {
	o.AddedAt = &v
}

// GetAddedBy returns the AddedBy field value if set, zero value otherwise.
func (o *PlaylistTrackObject) GetAddedBy() PlaylistTrackObjectAddedBy {
	if o == nil || isNil(o.AddedBy) {
		var ret PlaylistTrackObjectAddedBy
		return ret
	}
	return *o.AddedBy
}

// GetAddedByOk returns a tuple with the AddedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaylistTrackObject) GetAddedByOk() (*PlaylistTrackObjectAddedBy, bool) {
	if o == nil || isNil(o.AddedBy) {
		return nil, false
	}
	return o.AddedBy, true
}

// HasAddedBy returns a boolean if a field has been set.
func (o *PlaylistTrackObject) HasAddedBy() bool {
	if o != nil && !isNil(o.AddedBy) {
		return true
	}

	return false
}

// SetAddedBy gets a reference to the given PlaylistTrackObjectAddedBy and assigns it to the AddedBy field.
func (o *PlaylistTrackObject) SetAddedBy(v PlaylistTrackObjectAddedBy) {
	o.AddedBy = &v
}

// GetIsLocal returns the IsLocal field value if set, zero value otherwise.
func (o *PlaylistTrackObject) GetIsLocal() bool {
	if o == nil || isNil(o.IsLocal) {
		var ret bool
		return ret
	}
	return *o.IsLocal
}

// GetIsLocalOk returns a tuple with the IsLocal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaylistTrackObject) GetIsLocalOk() (*bool, bool) {
	if o == nil || isNil(o.IsLocal) {
		return nil, false
	}
	return o.IsLocal, true
}

// HasIsLocal returns a boolean if a field has been set.
func (o *PlaylistTrackObject) HasIsLocal() bool {
	if o != nil && !isNil(o.IsLocal) {
		return true
	}

	return false
}

// SetIsLocal gets a reference to the given bool and assigns it to the IsLocal field.
func (o *PlaylistTrackObject) SetIsLocal(v bool) {
	o.IsLocal = &v
}

// GetTrack returns the Track field value if set, zero value otherwise.
func (o *PlaylistTrackObject) GetTrack() PlaylistTrackObjectTrack {
	if o == nil || isNil(o.Track) {
		var ret PlaylistTrackObjectTrack
		return ret
	}
	return *o.Track
}

// GetTrackOk returns a tuple with the Track field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaylistTrackObject) GetTrackOk() (*PlaylistTrackObjectTrack, bool) {
	if o == nil || isNil(o.Track) {
		return nil, false
	}
	return o.Track, true
}

// HasTrack returns a boolean if a field has been set.
func (o *PlaylistTrackObject) HasTrack() bool {
	if o != nil && !isNil(o.Track) {
		return true
	}

	return false
}

// SetTrack gets a reference to the given PlaylistTrackObjectTrack and assigns it to the Track field.
func (o *PlaylistTrackObject) SetTrack(v PlaylistTrackObjectTrack) {
	o.Track = &v
}

func (o PlaylistTrackObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlaylistTrackObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AddedAt) {
		toSerialize["added_at"] = o.AddedAt
	}
	if !isNil(o.AddedBy) {
		toSerialize["added_by"] = o.AddedBy
	}
	if !isNil(o.IsLocal) {
		toSerialize["is_local"] = o.IsLocal
	}
	if !isNil(o.Track) {
		toSerialize["track"] = o.Track
	}
	return toSerialize, nil
}

type NullablePlaylistTrackObject struct {
	value *PlaylistTrackObject
	isSet bool
}

func (v NullablePlaylistTrackObject) Get() *PlaylistTrackObject {
	return v.value
}

func (v *NullablePlaylistTrackObject) Set(val *PlaylistTrackObject) {
	v.value = val
	v.isSet = true
}

func (v NullablePlaylistTrackObject) IsSet() bool {
	return v.isSet
}

func (v *NullablePlaylistTrackObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlaylistTrackObject(val *PlaylistTrackObject) *NullablePlaylistTrackObject {
	return &NullablePlaylistTrackObject{value: val, isSet: true}
}

func (v NullablePlaylistTrackObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlaylistTrackObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


