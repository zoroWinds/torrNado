/*
Spotify Web API

You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PlayerErrorObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlayerErrorObject{}

// PlayerErrorObject struct for PlayerErrorObject
type PlayerErrorObject struct {
	// The HTTP status code. Either `404 NOT FOUND` or `403 FORBIDDEN`.  Also returned in the response header. 
	Status *int32 `json:"status,omitempty"`
	// A short description of the cause of the error. 
	Message *string `json:"message,omitempty"`
	Reason *PlayerErrorReasons `json:"reason,omitempty"`
}

// NewPlayerErrorObject instantiates a new PlayerErrorObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlayerErrorObject() *PlayerErrorObject {
	this := PlayerErrorObject{}
	return &this
}

// NewPlayerErrorObjectWithDefaults instantiates a new PlayerErrorObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlayerErrorObjectWithDefaults() *PlayerErrorObject {
	this := PlayerErrorObject{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *PlayerErrorObject) GetStatus() int32 {
	if o == nil || isNil(o.Status) {
		var ret int32
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerErrorObject) GetStatusOk() (*int32, bool) {
	if o == nil || isNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *PlayerErrorObject) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given int32 and assigns it to the Status field.
func (o *PlayerErrorObject) SetStatus(v int32) {
	o.Status = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *PlayerErrorObject) GetMessage() string {
	if o == nil || isNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerErrorObject) GetMessageOk() (*string, bool) {
	if o == nil || isNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *PlayerErrorObject) HasMessage() bool {
	if o != nil && !isNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *PlayerErrorObject) SetMessage(v string) {
	o.Message = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *PlayerErrorObject) GetReason() PlayerErrorReasons {
	if o == nil || isNil(o.Reason) {
		var ret PlayerErrorReasons
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerErrorObject) GetReasonOk() (*PlayerErrorReasons, bool) {
	if o == nil || isNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *PlayerErrorObject) HasReason() bool {
	if o != nil && !isNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given PlayerErrorReasons and assigns it to the Reason field.
func (o *PlayerErrorObject) SetReason(v PlayerErrorReasons) {
	o.Reason = &v
}

func (o PlayerErrorObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlayerErrorObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !isNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !isNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	return toSerialize, nil
}

type NullablePlayerErrorObject struct {
	value *PlayerErrorObject
	isSet bool
}

func (v NullablePlayerErrorObject) Get() *PlayerErrorObject {
	return v.value
}

func (v *NullablePlayerErrorObject) Set(val *PlayerErrorObject) {
	v.value = val
	v.isSet = true
}

func (v NullablePlayerErrorObject) IsSet() bool {
	return v.isSet
}

func (v *NullablePlayerErrorObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlayerErrorObject(val *PlayerErrorObject) *NullablePlayerErrorObject {
	return &NullablePlayerErrorObject{value: val, isSet: true}
}

func (v NullablePlayerErrorObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlayerErrorObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


