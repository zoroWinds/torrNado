/*
Spotify Web API

You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SimplifiedPlaylistObjectTracks type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SimplifiedPlaylistObjectTracks{}

// SimplifiedPlaylistObjectTracks A collection containing a link ( `href` ) to the Web API endpoint where full details of the playlist's tracks can be retrieved, along with the `total` number of tracks in the playlist. Note, a track object may be `null`. This can happen if a track is no longer available. 
type SimplifiedPlaylistObjectTracks struct {
	// A link to the Web API endpoint where full details of the playlist's tracks can be retrieved. 
	Href *string `json:"href,omitempty"`
	// Number of tracks in the playlist. 
	Total *int32 `json:"total,omitempty"`
}

// NewSimplifiedPlaylistObjectTracks instantiates a new SimplifiedPlaylistObjectTracks object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSimplifiedPlaylistObjectTracks() *SimplifiedPlaylistObjectTracks {
	this := SimplifiedPlaylistObjectTracks{}
	return &this
}

// NewSimplifiedPlaylistObjectTracksWithDefaults instantiates a new SimplifiedPlaylistObjectTracks object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSimplifiedPlaylistObjectTracksWithDefaults() *SimplifiedPlaylistObjectTracks {
	this := SimplifiedPlaylistObjectTracks{}
	return &this
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *SimplifiedPlaylistObjectTracks) GetHref() string {
	if o == nil || isNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SimplifiedPlaylistObjectTracks) GetHrefOk() (*string, bool) {
	if o == nil || isNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *SimplifiedPlaylistObjectTracks) HasHref() bool {
	if o != nil && !isNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *SimplifiedPlaylistObjectTracks) SetHref(v string) {
	o.Href = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *SimplifiedPlaylistObjectTracks) GetTotal() int32 {
	if o == nil || isNil(o.Total) {
		var ret int32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SimplifiedPlaylistObjectTracks) GetTotalOk() (*int32, bool) {
	if o == nil || isNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *SimplifiedPlaylistObjectTracks) HasTotal() bool {
	if o != nil && !isNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int32 and assigns it to the Total field.
func (o *SimplifiedPlaylistObjectTracks) SetTotal(v int32) {
	o.Total = &v
}

func (o SimplifiedPlaylistObjectTracks) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SimplifiedPlaylistObjectTracks) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !isNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	return toSerialize, nil
}

type NullableSimplifiedPlaylistObjectTracks struct {
	value *SimplifiedPlaylistObjectTracks
	isSet bool
}

func (v NullableSimplifiedPlaylistObjectTracks) Get() *SimplifiedPlaylistObjectTracks {
	return v.value
}

func (v *NullableSimplifiedPlaylistObjectTracks) Set(val *SimplifiedPlaylistObjectTracks) {
	v.value = val
	v.isSet = true
}

func (v NullableSimplifiedPlaylistObjectTracks) IsSet() bool {
	return v.isSet
}

func (v *NullableSimplifiedPlaylistObjectTracks) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSimplifiedPlaylistObjectTracks(val *SimplifiedPlaylistObjectTracks) *NullableSimplifiedPlaylistObjectTracks {
	return &NullableSimplifiedPlaylistObjectTracks{value: val, isSet: true}
}

func (v NullableSimplifiedPlaylistObjectTracks) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSimplifiedPlaylistObjectTracks) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


