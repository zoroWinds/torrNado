/*
Spotify Web API

You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ErrorObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ErrorObject{}

// ErrorObject struct for ErrorObject
type ErrorObject struct {
	// The HTTP status code (also returned in the response header; see [Response Status Codes](/documentation/web-api/#response-status-codes) for more information). 
	Status int32 `json:"status"`
	// A short description of the cause of the error. 
	Message string `json:"message"`
}

// NewErrorObject instantiates a new ErrorObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorObject(status int32, message string) *ErrorObject {
	this := ErrorObject{}
	this.Status = status
	this.Message = message
	return &this
}

// NewErrorObjectWithDefaults instantiates a new ErrorObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorObjectWithDefaults() *ErrorObject {
	this := ErrorObject{}
	return &this
}

// GetStatus returns the Status field value
func (o *ErrorObject) GetStatus() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ErrorObject) GetStatusOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ErrorObject) SetStatus(v int32) {
	o.Status = v
}

// GetMessage returns the Message field value
func (o *ErrorObject) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *ErrorObject) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *ErrorObject) SetMessage(v string) {
	o.Message = v
}

func (o ErrorObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ErrorObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["status"] = o.Status
	toSerialize["message"] = o.Message
	return toSerialize, nil
}

type NullableErrorObject struct {
	value *ErrorObject
	isSet bool
}

func (v NullableErrorObject) Get() *ErrorObject {
	return v.value
}

func (v *NullableErrorObject) Set(val *ErrorObject) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorObject) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorObject(val *ErrorObject) *NullableErrorObject {
	return &NullableErrorObject{value: val, isSet: true}
}

func (v NullableErrorObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


