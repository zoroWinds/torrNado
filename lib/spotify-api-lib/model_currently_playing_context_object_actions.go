/*
Spotify Web API

You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CurrentlyPlayingContextObjectActions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CurrentlyPlayingContextObjectActions{}

// CurrentlyPlayingContextObjectActions Allows to update the user interface based on which playback actions are available within the current context. 
type CurrentlyPlayingContextObjectActions struct {
	// Interrupting playback. Optional field.
	InterruptingPlayback *bool `json:"interrupting_playback,omitempty"`
	// Pausing. Optional field.
	Pausing *bool `json:"pausing,omitempty"`
	// Resuming. Optional field.
	Resuming *bool `json:"resuming,omitempty"`
	// Seeking playback location. Optional field.
	Seeking *bool `json:"seeking,omitempty"`
	// Skipping to the next context. Optional field.
	SkippingNext *bool `json:"skipping_next,omitempty"`
	// Skipping to the previous context. Optional field.
	SkippingPrev *bool `json:"skipping_prev,omitempty"`
	// Toggling repeat context flag. Optional field.
	TogglingRepeatContext *bool `json:"toggling_repeat_context,omitempty"`
	// Toggling shuffle flag. Optional field.
	TogglingShuffle *bool `json:"toggling_shuffle,omitempty"`
	// Toggling repeat track flag. Optional field.
	TogglingRepeatTrack *bool `json:"toggling_repeat_track,omitempty"`
	// Transfering playback between devices. Optional field.
	TransferringPlayback *bool `json:"transferring_playback,omitempty"`
}

// NewCurrentlyPlayingContextObjectActions instantiates a new CurrentlyPlayingContextObjectActions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCurrentlyPlayingContextObjectActions() *CurrentlyPlayingContextObjectActions {
	this := CurrentlyPlayingContextObjectActions{}
	return &this
}

// NewCurrentlyPlayingContextObjectActionsWithDefaults instantiates a new CurrentlyPlayingContextObjectActions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCurrentlyPlayingContextObjectActionsWithDefaults() *CurrentlyPlayingContextObjectActions {
	this := CurrentlyPlayingContextObjectActions{}
	return &this
}

// GetInterruptingPlayback returns the InterruptingPlayback field value if set, zero value otherwise.
func (o *CurrentlyPlayingContextObjectActions) GetInterruptingPlayback() bool {
	if o == nil || isNil(o.InterruptingPlayback) {
		var ret bool
		return ret
	}
	return *o.InterruptingPlayback
}

// GetInterruptingPlaybackOk returns a tuple with the InterruptingPlayback field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrentlyPlayingContextObjectActions) GetInterruptingPlaybackOk() (*bool, bool) {
	if o == nil || isNil(o.InterruptingPlayback) {
		return nil, false
	}
	return o.InterruptingPlayback, true
}

// HasInterruptingPlayback returns a boolean if a field has been set.
func (o *CurrentlyPlayingContextObjectActions) HasInterruptingPlayback() bool {
	if o != nil && !isNil(o.InterruptingPlayback) {
		return true
	}

	return false
}

// SetInterruptingPlayback gets a reference to the given bool and assigns it to the InterruptingPlayback field.
func (o *CurrentlyPlayingContextObjectActions) SetInterruptingPlayback(v bool) {
	o.InterruptingPlayback = &v
}

// GetPausing returns the Pausing field value if set, zero value otherwise.
func (o *CurrentlyPlayingContextObjectActions) GetPausing() bool {
	if o == nil || isNil(o.Pausing) {
		var ret bool
		return ret
	}
	return *o.Pausing
}

// GetPausingOk returns a tuple with the Pausing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrentlyPlayingContextObjectActions) GetPausingOk() (*bool, bool) {
	if o == nil || isNil(o.Pausing) {
		return nil, false
	}
	return o.Pausing, true
}

// HasPausing returns a boolean if a field has been set.
func (o *CurrentlyPlayingContextObjectActions) HasPausing() bool {
	if o != nil && !isNil(o.Pausing) {
		return true
	}

	return false
}

// SetPausing gets a reference to the given bool and assigns it to the Pausing field.
func (o *CurrentlyPlayingContextObjectActions) SetPausing(v bool) {
	o.Pausing = &v
}

// GetResuming returns the Resuming field value if set, zero value otherwise.
func (o *CurrentlyPlayingContextObjectActions) GetResuming() bool {
	if o == nil || isNil(o.Resuming) {
		var ret bool
		return ret
	}
	return *o.Resuming
}

// GetResumingOk returns a tuple with the Resuming field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrentlyPlayingContextObjectActions) GetResumingOk() (*bool, bool) {
	if o == nil || isNil(o.Resuming) {
		return nil, false
	}
	return o.Resuming, true
}

// HasResuming returns a boolean if a field has been set.
func (o *CurrentlyPlayingContextObjectActions) HasResuming() bool {
	if o != nil && !isNil(o.Resuming) {
		return true
	}

	return false
}

// SetResuming gets a reference to the given bool and assigns it to the Resuming field.
func (o *CurrentlyPlayingContextObjectActions) SetResuming(v bool) {
	o.Resuming = &v
}

// GetSeeking returns the Seeking field value if set, zero value otherwise.
func (o *CurrentlyPlayingContextObjectActions) GetSeeking() bool {
	if o == nil || isNil(o.Seeking) {
		var ret bool
		return ret
	}
	return *o.Seeking
}

// GetSeekingOk returns a tuple with the Seeking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrentlyPlayingContextObjectActions) GetSeekingOk() (*bool, bool) {
	if o == nil || isNil(o.Seeking) {
		return nil, false
	}
	return o.Seeking, true
}

// HasSeeking returns a boolean if a field has been set.
func (o *CurrentlyPlayingContextObjectActions) HasSeeking() bool {
	if o != nil && !isNil(o.Seeking) {
		return true
	}

	return false
}

// SetSeeking gets a reference to the given bool and assigns it to the Seeking field.
func (o *CurrentlyPlayingContextObjectActions) SetSeeking(v bool) {
	o.Seeking = &v
}

// GetSkippingNext returns the SkippingNext field value if set, zero value otherwise.
func (o *CurrentlyPlayingContextObjectActions) GetSkippingNext() bool {
	if o == nil || isNil(o.SkippingNext) {
		var ret bool
		return ret
	}
	return *o.SkippingNext
}

// GetSkippingNextOk returns a tuple with the SkippingNext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrentlyPlayingContextObjectActions) GetSkippingNextOk() (*bool, bool) {
	if o == nil || isNil(o.SkippingNext) {
		return nil, false
	}
	return o.SkippingNext, true
}

// HasSkippingNext returns a boolean if a field has been set.
func (o *CurrentlyPlayingContextObjectActions) HasSkippingNext() bool {
	if o != nil && !isNil(o.SkippingNext) {
		return true
	}

	return false
}

// SetSkippingNext gets a reference to the given bool and assigns it to the SkippingNext field.
func (o *CurrentlyPlayingContextObjectActions) SetSkippingNext(v bool) {
	o.SkippingNext = &v
}

// GetSkippingPrev returns the SkippingPrev field value if set, zero value otherwise.
func (o *CurrentlyPlayingContextObjectActions) GetSkippingPrev() bool {
	if o == nil || isNil(o.SkippingPrev) {
		var ret bool
		return ret
	}
	return *o.SkippingPrev
}

// GetSkippingPrevOk returns a tuple with the SkippingPrev field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrentlyPlayingContextObjectActions) GetSkippingPrevOk() (*bool, bool) {
	if o == nil || isNil(o.SkippingPrev) {
		return nil, false
	}
	return o.SkippingPrev, true
}

// HasSkippingPrev returns a boolean if a field has been set.
func (o *CurrentlyPlayingContextObjectActions) HasSkippingPrev() bool {
	if o != nil && !isNil(o.SkippingPrev) {
		return true
	}

	return false
}

// SetSkippingPrev gets a reference to the given bool and assigns it to the SkippingPrev field.
func (o *CurrentlyPlayingContextObjectActions) SetSkippingPrev(v bool) {
	o.SkippingPrev = &v
}

// GetTogglingRepeatContext returns the TogglingRepeatContext field value if set, zero value otherwise.
func (o *CurrentlyPlayingContextObjectActions) GetTogglingRepeatContext() bool {
	if o == nil || isNil(o.TogglingRepeatContext) {
		var ret bool
		return ret
	}
	return *o.TogglingRepeatContext
}

// GetTogglingRepeatContextOk returns a tuple with the TogglingRepeatContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrentlyPlayingContextObjectActions) GetTogglingRepeatContextOk() (*bool, bool) {
	if o == nil || isNil(o.TogglingRepeatContext) {
		return nil, false
	}
	return o.TogglingRepeatContext, true
}

// HasTogglingRepeatContext returns a boolean if a field has been set.
func (o *CurrentlyPlayingContextObjectActions) HasTogglingRepeatContext() bool {
	if o != nil && !isNil(o.TogglingRepeatContext) {
		return true
	}

	return false
}

// SetTogglingRepeatContext gets a reference to the given bool and assigns it to the TogglingRepeatContext field.
func (o *CurrentlyPlayingContextObjectActions) SetTogglingRepeatContext(v bool) {
	o.TogglingRepeatContext = &v
}

// GetTogglingShuffle returns the TogglingShuffle field value if set, zero value otherwise.
func (o *CurrentlyPlayingContextObjectActions) GetTogglingShuffle() bool {
	if o == nil || isNil(o.TogglingShuffle) {
		var ret bool
		return ret
	}
	return *o.TogglingShuffle
}

// GetTogglingShuffleOk returns a tuple with the TogglingShuffle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrentlyPlayingContextObjectActions) GetTogglingShuffleOk() (*bool, bool) {
	if o == nil || isNil(o.TogglingShuffle) {
		return nil, false
	}
	return o.TogglingShuffle, true
}

// HasTogglingShuffle returns a boolean if a field has been set.
func (o *CurrentlyPlayingContextObjectActions) HasTogglingShuffle() bool {
	if o != nil && !isNil(o.TogglingShuffle) {
		return true
	}

	return false
}

// SetTogglingShuffle gets a reference to the given bool and assigns it to the TogglingShuffle field.
func (o *CurrentlyPlayingContextObjectActions) SetTogglingShuffle(v bool) {
	o.TogglingShuffle = &v
}

// GetTogglingRepeatTrack returns the TogglingRepeatTrack field value if set, zero value otherwise.
func (o *CurrentlyPlayingContextObjectActions) GetTogglingRepeatTrack() bool {
	if o == nil || isNil(o.TogglingRepeatTrack) {
		var ret bool
		return ret
	}
	return *o.TogglingRepeatTrack
}

// GetTogglingRepeatTrackOk returns a tuple with the TogglingRepeatTrack field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrentlyPlayingContextObjectActions) GetTogglingRepeatTrackOk() (*bool, bool) {
	if o == nil || isNil(o.TogglingRepeatTrack) {
		return nil, false
	}
	return o.TogglingRepeatTrack, true
}

// HasTogglingRepeatTrack returns a boolean if a field has been set.
func (o *CurrentlyPlayingContextObjectActions) HasTogglingRepeatTrack() bool {
	if o != nil && !isNil(o.TogglingRepeatTrack) {
		return true
	}

	return false
}

// SetTogglingRepeatTrack gets a reference to the given bool and assigns it to the TogglingRepeatTrack field.
func (o *CurrentlyPlayingContextObjectActions) SetTogglingRepeatTrack(v bool) {
	o.TogglingRepeatTrack = &v
}

// GetTransferringPlayback returns the TransferringPlayback field value if set, zero value otherwise.
func (o *CurrentlyPlayingContextObjectActions) GetTransferringPlayback() bool {
	if o == nil || isNil(o.TransferringPlayback) {
		var ret bool
		return ret
	}
	return *o.TransferringPlayback
}

// GetTransferringPlaybackOk returns a tuple with the TransferringPlayback field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrentlyPlayingContextObjectActions) GetTransferringPlaybackOk() (*bool, bool) {
	if o == nil || isNil(o.TransferringPlayback) {
		return nil, false
	}
	return o.TransferringPlayback, true
}

// HasTransferringPlayback returns a boolean if a field has been set.
func (o *CurrentlyPlayingContextObjectActions) HasTransferringPlayback() bool {
	if o != nil && !isNil(o.TransferringPlayback) {
		return true
	}

	return false
}

// SetTransferringPlayback gets a reference to the given bool and assigns it to the TransferringPlayback field.
func (o *CurrentlyPlayingContextObjectActions) SetTransferringPlayback(v bool) {
	o.TransferringPlayback = &v
}

func (o CurrentlyPlayingContextObjectActions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CurrentlyPlayingContextObjectActions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.InterruptingPlayback) {
		toSerialize["interrupting_playback"] = o.InterruptingPlayback
	}
	if !isNil(o.Pausing) {
		toSerialize["pausing"] = o.Pausing
	}
	if !isNil(o.Resuming) {
		toSerialize["resuming"] = o.Resuming
	}
	if !isNil(o.Seeking) {
		toSerialize["seeking"] = o.Seeking
	}
	if !isNil(o.SkippingNext) {
		toSerialize["skipping_next"] = o.SkippingNext
	}
	if !isNil(o.SkippingPrev) {
		toSerialize["skipping_prev"] = o.SkippingPrev
	}
	if !isNil(o.TogglingRepeatContext) {
		toSerialize["toggling_repeat_context"] = o.TogglingRepeatContext
	}
	if !isNil(o.TogglingShuffle) {
		toSerialize["toggling_shuffle"] = o.TogglingShuffle
	}
	if !isNil(o.TogglingRepeatTrack) {
		toSerialize["toggling_repeat_track"] = o.TogglingRepeatTrack
	}
	if !isNil(o.TransferringPlayback) {
		toSerialize["transferring_playback"] = o.TransferringPlayback
	}
	return toSerialize, nil
}

type NullableCurrentlyPlayingContextObjectActions struct {
	value *CurrentlyPlayingContextObjectActions
	isSet bool
}

func (v NullableCurrentlyPlayingContextObjectActions) Get() *CurrentlyPlayingContextObjectActions {
	return v.value
}

func (v *NullableCurrentlyPlayingContextObjectActions) Set(val *CurrentlyPlayingContextObjectActions) {
	v.value = val
	v.isSet = true
}

func (v NullableCurrentlyPlayingContextObjectActions) IsSet() bool {
	return v.isSet
}

func (v *NullableCurrentlyPlayingContextObjectActions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCurrentlyPlayingContextObjectActions(val *CurrentlyPlayingContextObjectActions) *NullableCurrentlyPlayingContextObjectActions {
	return &NullableCurrentlyPlayingContextObjectActions{value: val, isSet: true}
}

func (v NullableCurrentlyPlayingContextObjectActions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCurrentlyPlayingContextObjectActions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


