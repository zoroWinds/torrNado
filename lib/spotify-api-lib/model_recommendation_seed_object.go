/*
Spotify Web API

You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RecommendationSeedObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecommendationSeedObject{}

// RecommendationSeedObject struct for RecommendationSeedObject
type RecommendationSeedObject struct {
	// The number of tracks available after min\\_\\* and max\\_\\* filters have been applied. 
	AfterFilteringSize *int32 `json:"afterFilteringSize,omitempty"`
	// The number of tracks available after relinking for regional availability. 
	AfterRelinkingSize *int32 `json:"afterRelinkingSize,omitempty"`
	// A link to the full track or artist data for this seed. For tracks this will be a link to a [Track Object](/documentation/web-api/reference/#object-trackobject). For artists a link to [an Artist Object](/documentation/web-api/reference/#object-artistobject). For genre seeds, this value will be `null`. 
	Href *string `json:"href,omitempty"`
	// The id used to select this seed. This will be the same as the string used in the `seed_artists`, `seed_tracks` or `seed_genres` parameter. 
	Id *string `json:"id,omitempty"`
	// The number of recommended tracks available for this seed. 
	InitialPoolSize *int32 `json:"initialPoolSize,omitempty"`
	// The entity type of this seed. One of `artist`, `track` or `genre`. 
	Type *string `json:"type,omitempty"`
}

// NewRecommendationSeedObject instantiates a new RecommendationSeedObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecommendationSeedObject() *RecommendationSeedObject {
	this := RecommendationSeedObject{}
	return &this
}

// NewRecommendationSeedObjectWithDefaults instantiates a new RecommendationSeedObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecommendationSeedObjectWithDefaults() *RecommendationSeedObject {
	this := RecommendationSeedObject{}
	return &this
}

// GetAfterFilteringSize returns the AfterFilteringSize field value if set, zero value otherwise.
func (o *RecommendationSeedObject) GetAfterFilteringSize() int32 {
	if o == nil || isNil(o.AfterFilteringSize) {
		var ret int32
		return ret
	}
	return *o.AfterFilteringSize
}

// GetAfterFilteringSizeOk returns a tuple with the AfterFilteringSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendationSeedObject) GetAfterFilteringSizeOk() (*int32, bool) {
	if o == nil || isNil(o.AfterFilteringSize) {
		return nil, false
	}
	return o.AfterFilteringSize, true
}

// HasAfterFilteringSize returns a boolean if a field has been set.
func (o *RecommendationSeedObject) HasAfterFilteringSize() bool {
	if o != nil && !isNil(o.AfterFilteringSize) {
		return true
	}

	return false
}

// SetAfterFilteringSize gets a reference to the given int32 and assigns it to the AfterFilteringSize field.
func (o *RecommendationSeedObject) SetAfterFilteringSize(v int32) {
	o.AfterFilteringSize = &v
}

// GetAfterRelinkingSize returns the AfterRelinkingSize field value if set, zero value otherwise.
func (o *RecommendationSeedObject) GetAfterRelinkingSize() int32 {
	if o == nil || isNil(o.AfterRelinkingSize) {
		var ret int32
		return ret
	}
	return *o.AfterRelinkingSize
}

// GetAfterRelinkingSizeOk returns a tuple with the AfterRelinkingSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendationSeedObject) GetAfterRelinkingSizeOk() (*int32, bool) {
	if o == nil || isNil(o.AfterRelinkingSize) {
		return nil, false
	}
	return o.AfterRelinkingSize, true
}

// HasAfterRelinkingSize returns a boolean if a field has been set.
func (o *RecommendationSeedObject) HasAfterRelinkingSize() bool {
	if o != nil && !isNil(o.AfterRelinkingSize) {
		return true
	}

	return false
}

// SetAfterRelinkingSize gets a reference to the given int32 and assigns it to the AfterRelinkingSize field.
func (o *RecommendationSeedObject) SetAfterRelinkingSize(v int32) {
	o.AfterRelinkingSize = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *RecommendationSeedObject) GetHref() string {
	if o == nil || isNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendationSeedObject) GetHrefOk() (*string, bool) {
	if o == nil || isNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *RecommendationSeedObject) HasHref() bool {
	if o != nil && !isNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *RecommendationSeedObject) SetHref(v string) {
	o.Href = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RecommendationSeedObject) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendationSeedObject) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RecommendationSeedObject) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RecommendationSeedObject) SetId(v string) {
	o.Id = &v
}

// GetInitialPoolSize returns the InitialPoolSize field value if set, zero value otherwise.
func (o *RecommendationSeedObject) GetInitialPoolSize() int32 {
	if o == nil || isNil(o.InitialPoolSize) {
		var ret int32
		return ret
	}
	return *o.InitialPoolSize
}

// GetInitialPoolSizeOk returns a tuple with the InitialPoolSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendationSeedObject) GetInitialPoolSizeOk() (*int32, bool) {
	if o == nil || isNil(o.InitialPoolSize) {
		return nil, false
	}
	return o.InitialPoolSize, true
}

// HasInitialPoolSize returns a boolean if a field has been set.
func (o *RecommendationSeedObject) HasInitialPoolSize() bool {
	if o != nil && !isNil(o.InitialPoolSize) {
		return true
	}

	return false
}

// SetInitialPoolSize gets a reference to the given int32 and assigns it to the InitialPoolSize field.
func (o *RecommendationSeedObject) SetInitialPoolSize(v int32) {
	o.InitialPoolSize = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RecommendationSeedObject) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecommendationSeedObject) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RecommendationSeedObject) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *RecommendationSeedObject) SetType(v string) {
	o.Type = &v
}

func (o RecommendationSeedObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecommendationSeedObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AfterFilteringSize) {
		toSerialize["afterFilteringSize"] = o.AfterFilteringSize
	}
	if !isNil(o.AfterRelinkingSize) {
		toSerialize["afterRelinkingSize"] = o.AfterRelinkingSize
	}
	if !isNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.InitialPoolSize) {
		toSerialize["initialPoolSize"] = o.InitialPoolSize
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableRecommendationSeedObject struct {
	value *RecommendationSeedObject
	isSet bool
}

func (v NullableRecommendationSeedObject) Get() *RecommendationSeedObject {
	return v.value
}

func (v *NullableRecommendationSeedObject) Set(val *RecommendationSeedObject) {
	v.value = val
	v.isSet = true
}

func (v NullableRecommendationSeedObject) IsSet() bool {
	return v.isSet
}

func (v *NullableRecommendationSeedObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecommendationSeedObject(val *RecommendationSeedObject) *NullableRecommendationSeedObject {
	return &NullableRecommendationSeedObject{value: val, isSet: true}
}

func (v NullableRecommendationSeedObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecommendationSeedObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


