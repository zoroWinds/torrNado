/*
Spotify Web API

You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ArtistObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ArtistObject{}

// ArtistObject struct for ArtistObject
type ArtistObject struct {
	ExternalUrls *ArtistObjectExternalUrls `json:"external_urls,omitempty"`
	Followers *ArtistObjectFollowers `json:"followers,omitempty"`
	// A list of the genres the artist is associated with. If not yet classified, the array is empty. 
	Genres []string `json:"genres,omitempty"`
	// A link to the Web API endpoint providing full details of the artist. 
	Href *string `json:"href,omitempty"`
	// The [Spotify ID](/documentation/web-api/#spotify-uris-and-ids) for the artist. 
	Id *string `json:"id,omitempty"`
	// Images of the artist in various sizes, widest first. 
	Images []ImageObject `json:"images,omitempty"`
	// The name of the artist. 
	Name *string `json:"name,omitempty"`
	// The popularity of the artist. The value will be between 0 and 100, with 100 being the most popular. The artist's popularity is calculated from the popularity of all the artist's tracks. 
	Popularity *int32 `json:"popularity,omitempty"`
	// The object type. 
	Type *string `json:"type,omitempty"`
	// The [Spotify URI](/documentation/web-api/#spotify-uris-and-ids) for the artist. 
	Uri *string `json:"uri,omitempty"`
}

// NewArtistObject instantiates a new ArtistObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArtistObject() *ArtistObject {
	this := ArtistObject{}
	return &this
}

// NewArtistObjectWithDefaults instantiates a new ArtistObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArtistObjectWithDefaults() *ArtistObject {
	this := ArtistObject{}
	return &this
}

// GetExternalUrls returns the ExternalUrls field value if set, zero value otherwise.
func (o *ArtistObject) GetExternalUrls() ArtistObjectExternalUrls {
	if o == nil || isNil(o.ExternalUrls) {
		var ret ArtistObjectExternalUrls
		return ret
	}
	return *o.ExternalUrls
}

// GetExternalUrlsOk returns a tuple with the ExternalUrls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArtistObject) GetExternalUrlsOk() (*ArtistObjectExternalUrls, bool) {
	if o == nil || isNil(o.ExternalUrls) {
		return nil, false
	}
	return o.ExternalUrls, true
}

// HasExternalUrls returns a boolean if a field has been set.
func (o *ArtistObject) HasExternalUrls() bool {
	if o != nil && !isNil(o.ExternalUrls) {
		return true
	}

	return false
}

// SetExternalUrls gets a reference to the given ArtistObjectExternalUrls and assigns it to the ExternalUrls field.
func (o *ArtistObject) SetExternalUrls(v ArtistObjectExternalUrls) {
	o.ExternalUrls = &v
}

// GetFollowers returns the Followers field value if set, zero value otherwise.
func (o *ArtistObject) GetFollowers() ArtistObjectFollowers {
	if o == nil || isNil(o.Followers) {
		var ret ArtistObjectFollowers
		return ret
	}
	return *o.Followers
}

// GetFollowersOk returns a tuple with the Followers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArtistObject) GetFollowersOk() (*ArtistObjectFollowers, bool) {
	if o == nil || isNil(o.Followers) {
		return nil, false
	}
	return o.Followers, true
}

// HasFollowers returns a boolean if a field has been set.
func (o *ArtistObject) HasFollowers() bool {
	if o != nil && !isNil(o.Followers) {
		return true
	}

	return false
}

// SetFollowers gets a reference to the given ArtistObjectFollowers and assigns it to the Followers field.
func (o *ArtistObject) SetFollowers(v ArtistObjectFollowers) {
	o.Followers = &v
}

// GetGenres returns the Genres field value if set, zero value otherwise.
func (o *ArtistObject) GetGenres() []string {
	if o == nil || isNil(o.Genres) {
		var ret []string
		return ret
	}
	return o.Genres
}

// GetGenresOk returns a tuple with the Genres field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArtistObject) GetGenresOk() ([]string, bool) {
	if o == nil || isNil(o.Genres) {
		return nil, false
	}
	return o.Genres, true
}

// HasGenres returns a boolean if a field has been set.
func (o *ArtistObject) HasGenres() bool {
	if o != nil && !isNil(o.Genres) {
		return true
	}

	return false
}

// SetGenres gets a reference to the given []string and assigns it to the Genres field.
func (o *ArtistObject) SetGenres(v []string) {
	o.Genres = v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *ArtistObject) GetHref() string {
	if o == nil || isNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArtistObject) GetHrefOk() (*string, bool) {
	if o == nil || isNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *ArtistObject) HasHref() bool {
	if o != nil && !isNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *ArtistObject) SetHref(v string) {
	o.Href = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ArtistObject) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArtistObject) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ArtistObject) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ArtistObject) SetId(v string) {
	o.Id = &v
}

// GetImages returns the Images field value if set, zero value otherwise.
func (o *ArtistObject) GetImages() []ImageObject {
	if o == nil || isNil(o.Images) {
		var ret []ImageObject
		return ret
	}
	return o.Images
}

// GetImagesOk returns a tuple with the Images field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArtistObject) GetImagesOk() ([]ImageObject, bool) {
	if o == nil || isNil(o.Images) {
		return nil, false
	}
	return o.Images, true
}

// HasImages returns a boolean if a field has been set.
func (o *ArtistObject) HasImages() bool {
	if o != nil && !isNil(o.Images) {
		return true
	}

	return false
}

// SetImages gets a reference to the given []ImageObject and assigns it to the Images field.
func (o *ArtistObject) SetImages(v []ImageObject) {
	o.Images = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ArtistObject) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArtistObject) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ArtistObject) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ArtistObject) SetName(v string) {
	o.Name = &v
}

// GetPopularity returns the Popularity field value if set, zero value otherwise.
func (o *ArtistObject) GetPopularity() int32 {
	if o == nil || isNil(o.Popularity) {
		var ret int32
		return ret
	}
	return *o.Popularity
}

// GetPopularityOk returns a tuple with the Popularity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArtistObject) GetPopularityOk() (*int32, bool) {
	if o == nil || isNil(o.Popularity) {
		return nil, false
	}
	return o.Popularity, true
}

// HasPopularity returns a boolean if a field has been set.
func (o *ArtistObject) HasPopularity() bool {
	if o != nil && !isNil(o.Popularity) {
		return true
	}

	return false
}

// SetPopularity gets a reference to the given int32 and assigns it to the Popularity field.
func (o *ArtistObject) SetPopularity(v int32) {
	o.Popularity = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ArtistObject) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArtistObject) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ArtistObject) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ArtistObject) SetType(v string) {
	o.Type = &v
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *ArtistObject) GetUri() string {
	if o == nil || isNil(o.Uri) {
		var ret string
		return ret
	}
	return *o.Uri
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArtistObject) GetUriOk() (*string, bool) {
	if o == nil || isNil(o.Uri) {
		return nil, false
	}
	return o.Uri, true
}

// HasUri returns a boolean if a field has been set.
func (o *ArtistObject) HasUri() bool {
	if o != nil && !isNil(o.Uri) {
		return true
	}

	return false
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
func (o *ArtistObject) SetUri(v string) {
	o.Uri = &v
}

func (o ArtistObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ArtistObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ExternalUrls) {
		toSerialize["external_urls"] = o.ExternalUrls
	}
	if !isNil(o.Followers) {
		toSerialize["followers"] = o.Followers
	}
	if !isNil(o.Genres) {
		toSerialize["genres"] = o.Genres
	}
	if !isNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Images) {
		toSerialize["images"] = o.Images
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Popularity) {
		toSerialize["popularity"] = o.Popularity
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !isNil(o.Uri) {
		toSerialize["uri"] = o.Uri
	}
	return toSerialize, nil
}

type NullableArtistObject struct {
	value *ArtistObject
	isSet bool
}

func (v NullableArtistObject) Get() *ArtistObject {
	return v.value
}

func (v *NullableArtistObject) Set(val *ArtistObject) {
	v.value = val
	v.isSet = true
}

func (v NullableArtistObject) IsSet() bool {
	return v.isSet
}

func (v *NullableArtistObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArtistObject(val *ArtistObject) *NullableArtistObject {
	return &NullableArtistObject{value: val, isSet: true}
}

func (v NullableArtistObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArtistObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


