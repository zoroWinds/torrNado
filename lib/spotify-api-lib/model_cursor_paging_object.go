/*
Spotify Web API

You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CursorPagingObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CursorPagingObject{}

// CursorPagingObject struct for CursorPagingObject
type CursorPagingObject struct {
	// A link to the Web API endpoint returning the full result of the request.
	Href *string `json:"href,omitempty"`
	// The requested data.
	Items []map[string]interface{} `json:"items,omitempty"`
	// The maximum number of items in the response (as set in the query or by default).
	Limit *int32 `json:"limit,omitempty"`
	// URL to the next page of items. ( `null` if none)
	Next *string `json:"next,omitempty"`
	Cursors *CursorPagingObjectCursors `json:"cursors,omitempty"`
	// The total number of items available to return.
	Total *int32 `json:"total,omitempty"`
}

// NewCursorPagingObject instantiates a new CursorPagingObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCursorPagingObject() *CursorPagingObject {
	this := CursorPagingObject{}
	return &this
}

// NewCursorPagingObjectWithDefaults instantiates a new CursorPagingObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCursorPagingObjectWithDefaults() *CursorPagingObject {
	this := CursorPagingObject{}
	return &this
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *CursorPagingObject) GetHref() string {
	if o == nil || isNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CursorPagingObject) GetHrefOk() (*string, bool) {
	if o == nil || isNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *CursorPagingObject) HasHref() bool {
	if o != nil && !isNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *CursorPagingObject) SetHref(v string) {
	o.Href = &v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *CursorPagingObject) GetItems() []map[string]interface{} {
	if o == nil || isNil(o.Items) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CursorPagingObject) GetItemsOk() ([]map[string]interface{}, bool) {
	if o == nil || isNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *CursorPagingObject) HasItems() bool {
	if o != nil && !isNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []map[string]interface{} and assigns it to the Items field.
func (o *CursorPagingObject) SetItems(v []map[string]interface{}) {
	o.Items = v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *CursorPagingObject) GetLimit() int32 {
	if o == nil || isNil(o.Limit) {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CursorPagingObject) GetLimitOk() (*int32, bool) {
	if o == nil || isNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *CursorPagingObject) HasLimit() bool {
	if o != nil && !isNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *CursorPagingObject) SetLimit(v int32) {
	o.Limit = &v
}

// GetNext returns the Next field value if set, zero value otherwise.
func (o *CursorPagingObject) GetNext() string {
	if o == nil || isNil(o.Next) {
		var ret string
		return ret
	}
	return *o.Next
}

// GetNextOk returns a tuple with the Next field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CursorPagingObject) GetNextOk() (*string, bool) {
	if o == nil || isNil(o.Next) {
		return nil, false
	}
	return o.Next, true
}

// HasNext returns a boolean if a field has been set.
func (o *CursorPagingObject) HasNext() bool {
	if o != nil && !isNil(o.Next) {
		return true
	}

	return false
}

// SetNext gets a reference to the given string and assigns it to the Next field.
func (o *CursorPagingObject) SetNext(v string) {
	o.Next = &v
}

// GetCursors returns the Cursors field value if set, zero value otherwise.
func (o *CursorPagingObject) GetCursors() CursorPagingObjectCursors {
	if o == nil || isNil(o.Cursors) {
		var ret CursorPagingObjectCursors
		return ret
	}
	return *o.Cursors
}

// GetCursorsOk returns a tuple with the Cursors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CursorPagingObject) GetCursorsOk() (*CursorPagingObjectCursors, bool) {
	if o == nil || isNil(o.Cursors) {
		return nil, false
	}
	return o.Cursors, true
}

// HasCursors returns a boolean if a field has been set.
func (o *CursorPagingObject) HasCursors() bool {
	if o != nil && !isNil(o.Cursors) {
		return true
	}

	return false
}

// SetCursors gets a reference to the given CursorPagingObjectCursors and assigns it to the Cursors field.
func (o *CursorPagingObject) SetCursors(v CursorPagingObjectCursors) {
	o.Cursors = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *CursorPagingObject) GetTotal() int32 {
	if o == nil || isNil(o.Total) {
		var ret int32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CursorPagingObject) GetTotalOk() (*int32, bool) {
	if o == nil || isNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *CursorPagingObject) HasTotal() bool {
	if o != nil && !isNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int32 and assigns it to the Total field.
func (o *CursorPagingObject) SetTotal(v int32) {
	o.Total = &v
}

func (o CursorPagingObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CursorPagingObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !isNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	if !isNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !isNil(o.Next) {
		toSerialize["next"] = o.Next
	}
	if !isNil(o.Cursors) {
		toSerialize["cursors"] = o.Cursors
	}
	if !isNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	return toSerialize, nil
}

type NullableCursorPagingObject struct {
	value *CursorPagingObject
	isSet bool
}

func (v NullableCursorPagingObject) Get() *CursorPagingObject {
	return v.value
}

func (v *NullableCursorPagingObject) Set(val *CursorPagingObject) {
	v.value = val
	v.isSet = true
}

func (v NullableCursorPagingObject) IsSet() bool {
	return v.isSet
}

func (v *NullableCursorPagingObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCursorPagingObject(val *CursorPagingObject) *NullableCursorPagingObject {
	return &NullableCursorPagingObject{value: val, isSet: true}
}

func (v NullableCursorPagingObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCursorPagingObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


