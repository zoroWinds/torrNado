/*
Spotify Web API

You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PrivateUserObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PrivateUserObject{}

// PrivateUserObject struct for PrivateUserObject
type PrivateUserObject struct {
	// The country of the user, as set in the user's account profile. An [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). _This field is only available when the current user has granted access to the [user-read-private](/documentation/general/guides/authorization-guide/#list-of-scopes) scope._ 
	Country *string `json:"country,omitempty"`
	// The name displayed on the user's profile. `null` if not available. 
	DisplayName *string `json:"display_name,omitempty"`
	// The user's email address, as entered by the user when creating their account. _**Important!** This email address is unverified; there is no proof that it actually belongs to the user._ _This field is only available when the current user has granted access to the [user-read-email](/documentation/general/guides/authorization-guide/#list-of-scopes) scope._ 
	Email *string `json:"email,omitempty"`
	ExplicitContent *PrivateUserObjectExplicitContent `json:"explicit_content,omitempty"`
	ExternalUrls *PrivateUserObjectExternalUrls `json:"external_urls,omitempty"`
	Followers *PrivateUserObjectFollowers `json:"followers,omitempty"`
	// A link to the Web API endpoint for this user. 
	Href *string `json:"href,omitempty"`
	// The [Spotify user ID](/documentation/web-api/#spotify-uris-and-ids) for the user. 
	Id *string `json:"id,omitempty"`
	// The user's profile image.
	Images []ImageObject `json:"images,omitempty"`
	// The user's Spotify subscription level: \"premium\", \"free\", etc. (The subscription level \"open\" can be considered the same as \"free\".) _This field is only available when the current user has granted access to the [user-read-private](/documentation/general/guides/authorization-guide/#list-of-scopes) scope._ 
	Product *string `json:"product,omitempty"`
	// The object type: \"user\" 
	Type *string `json:"type,omitempty"`
	// The [Spotify URI](/documentation/web-api/#spotify-uris-and-ids) for the user. 
	Uri *string `json:"uri,omitempty"`
}

// NewPrivateUserObject instantiates a new PrivateUserObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrivateUserObject() *PrivateUserObject {
	this := PrivateUserObject{}
	return &this
}

// NewPrivateUserObjectWithDefaults instantiates a new PrivateUserObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrivateUserObjectWithDefaults() *PrivateUserObject {
	this := PrivateUserObject{}
	return &this
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *PrivateUserObject) GetCountry() string {
	if o == nil || isNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivateUserObject) GetCountryOk() (*string, bool) {
	if o == nil || isNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *PrivateUserObject) HasCountry() bool {
	if o != nil && !isNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *PrivateUserObject) SetCountry(v string) {
	o.Country = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *PrivateUserObject) GetDisplayName() string {
	if o == nil || isNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivateUserObject) GetDisplayNameOk() (*string, bool) {
	if o == nil || isNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *PrivateUserObject) HasDisplayName() bool {
	if o != nil && !isNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *PrivateUserObject) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *PrivateUserObject) GetEmail() string {
	if o == nil || isNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivateUserObject) GetEmailOk() (*string, bool) {
	if o == nil || isNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *PrivateUserObject) HasEmail() bool {
	if o != nil && !isNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *PrivateUserObject) SetEmail(v string) {
	o.Email = &v
}

// GetExplicitContent returns the ExplicitContent field value if set, zero value otherwise.
func (o *PrivateUserObject) GetExplicitContent() PrivateUserObjectExplicitContent {
	if o == nil || isNil(o.ExplicitContent) {
		var ret PrivateUserObjectExplicitContent
		return ret
	}
	return *o.ExplicitContent
}

// GetExplicitContentOk returns a tuple with the ExplicitContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivateUserObject) GetExplicitContentOk() (*PrivateUserObjectExplicitContent, bool) {
	if o == nil || isNil(o.ExplicitContent) {
		return nil, false
	}
	return o.ExplicitContent, true
}

// HasExplicitContent returns a boolean if a field has been set.
func (o *PrivateUserObject) HasExplicitContent() bool {
	if o != nil && !isNil(o.ExplicitContent) {
		return true
	}

	return false
}

// SetExplicitContent gets a reference to the given PrivateUserObjectExplicitContent and assigns it to the ExplicitContent field.
func (o *PrivateUserObject) SetExplicitContent(v PrivateUserObjectExplicitContent) {
	o.ExplicitContent = &v
}

// GetExternalUrls returns the ExternalUrls field value if set, zero value otherwise.
func (o *PrivateUserObject) GetExternalUrls() PrivateUserObjectExternalUrls {
	if o == nil || isNil(o.ExternalUrls) {
		var ret PrivateUserObjectExternalUrls
		return ret
	}
	return *o.ExternalUrls
}

// GetExternalUrlsOk returns a tuple with the ExternalUrls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivateUserObject) GetExternalUrlsOk() (*PrivateUserObjectExternalUrls, bool) {
	if o == nil || isNil(o.ExternalUrls) {
		return nil, false
	}
	return o.ExternalUrls, true
}

// HasExternalUrls returns a boolean if a field has been set.
func (o *PrivateUserObject) HasExternalUrls() bool {
	if o != nil && !isNil(o.ExternalUrls) {
		return true
	}

	return false
}

// SetExternalUrls gets a reference to the given PrivateUserObjectExternalUrls and assigns it to the ExternalUrls field.
func (o *PrivateUserObject) SetExternalUrls(v PrivateUserObjectExternalUrls) {
	o.ExternalUrls = &v
}

// GetFollowers returns the Followers field value if set, zero value otherwise.
func (o *PrivateUserObject) GetFollowers() PrivateUserObjectFollowers {
	if o == nil || isNil(o.Followers) {
		var ret PrivateUserObjectFollowers
		return ret
	}
	return *o.Followers
}

// GetFollowersOk returns a tuple with the Followers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivateUserObject) GetFollowersOk() (*PrivateUserObjectFollowers, bool) {
	if o == nil || isNil(o.Followers) {
		return nil, false
	}
	return o.Followers, true
}

// HasFollowers returns a boolean if a field has been set.
func (o *PrivateUserObject) HasFollowers() bool {
	if o != nil && !isNil(o.Followers) {
		return true
	}

	return false
}

// SetFollowers gets a reference to the given PrivateUserObjectFollowers and assigns it to the Followers field.
func (o *PrivateUserObject) SetFollowers(v PrivateUserObjectFollowers) {
	o.Followers = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *PrivateUserObject) GetHref() string {
	if o == nil || isNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivateUserObject) GetHrefOk() (*string, bool) {
	if o == nil || isNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *PrivateUserObject) HasHref() bool {
	if o != nil && !isNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *PrivateUserObject) SetHref(v string) {
	o.Href = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PrivateUserObject) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivateUserObject) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PrivateUserObject) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PrivateUserObject) SetId(v string) {
	o.Id = &v
}

// GetImages returns the Images field value if set, zero value otherwise.
func (o *PrivateUserObject) GetImages() []ImageObject {
	if o == nil || isNil(o.Images) {
		var ret []ImageObject
		return ret
	}
	return o.Images
}

// GetImagesOk returns a tuple with the Images field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivateUserObject) GetImagesOk() ([]ImageObject, bool) {
	if o == nil || isNil(o.Images) {
		return nil, false
	}
	return o.Images, true
}

// HasImages returns a boolean if a field has been set.
func (o *PrivateUserObject) HasImages() bool {
	if o != nil && !isNil(o.Images) {
		return true
	}

	return false
}

// SetImages gets a reference to the given []ImageObject and assigns it to the Images field.
func (o *PrivateUserObject) SetImages(v []ImageObject) {
	o.Images = v
}

// GetProduct returns the Product field value if set, zero value otherwise.
func (o *PrivateUserObject) GetProduct() string {
	if o == nil || isNil(o.Product) {
		var ret string
		return ret
	}
	return *o.Product
}

// GetProductOk returns a tuple with the Product field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivateUserObject) GetProductOk() (*string, bool) {
	if o == nil || isNil(o.Product) {
		return nil, false
	}
	return o.Product, true
}

// HasProduct returns a boolean if a field has been set.
func (o *PrivateUserObject) HasProduct() bool {
	if o != nil && !isNil(o.Product) {
		return true
	}

	return false
}

// SetProduct gets a reference to the given string and assigns it to the Product field.
func (o *PrivateUserObject) SetProduct(v string) {
	o.Product = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PrivateUserObject) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivateUserObject) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PrivateUserObject) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PrivateUserObject) SetType(v string) {
	o.Type = &v
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *PrivateUserObject) GetUri() string {
	if o == nil || isNil(o.Uri) {
		var ret string
		return ret
	}
	return *o.Uri
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivateUserObject) GetUriOk() (*string, bool) {
	if o == nil || isNil(o.Uri) {
		return nil, false
	}
	return o.Uri, true
}

// HasUri returns a boolean if a field has been set.
func (o *PrivateUserObject) HasUri() bool {
	if o != nil && !isNil(o.Uri) {
		return true
	}

	return false
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
func (o *PrivateUserObject) SetUri(v string) {
	o.Uri = &v
}

func (o PrivateUserObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrivateUserObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if !isNil(o.DisplayName) {
		toSerialize["display_name"] = o.DisplayName
	}
	if !isNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !isNil(o.ExplicitContent) {
		toSerialize["explicit_content"] = o.ExplicitContent
	}
	if !isNil(o.ExternalUrls) {
		toSerialize["external_urls"] = o.ExternalUrls
	}
	if !isNil(o.Followers) {
		toSerialize["followers"] = o.Followers
	}
	if !isNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Images) {
		toSerialize["images"] = o.Images
	}
	if !isNil(o.Product) {
		toSerialize["product"] = o.Product
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !isNil(o.Uri) {
		toSerialize["uri"] = o.Uri
	}
	return toSerialize, nil
}

type NullablePrivateUserObject struct {
	value *PrivateUserObject
	isSet bool
}

func (v NullablePrivateUserObject) Get() *PrivateUserObject {
	return v.value
}

func (v *NullablePrivateUserObject) Set(val *PrivateUserObject) {
	v.value = val
	v.isSet = true
}

func (v NullablePrivateUserObject) IsSet() bool {
	return v.isSet
}

func (v *NullablePrivateUserObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrivateUserObject(val *PrivateUserObject) *NullablePrivateUserObject {
	return &NullablePrivateUserObject{value: val, isSet: true}
}

func (v NullablePrivateUserObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrivateUserObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


