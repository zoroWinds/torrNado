/*
Spotify Web API

You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SectionObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SectionObject{}

// SectionObject struct for SectionObject
type SectionObject struct {
	// The starting point (in seconds) of the section.
	Start *float32 `json:"start,omitempty"`
	// The duration (in seconds) of the section.
	Duration *float32 `json:"duration,omitempty"`
	// The confidence, from 0.0 to 1.0, of the reliability of the section's \"designation\".
	Confidence *float32 `json:"confidence,omitempty"`
	// The overall loudness of the section in decibels (dB). Loudness values are useful for comparing relative loudness of sections within tracks.
	Loudness *float32 `json:"loudness,omitempty"`
	// The overall estimated tempo of the section in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration.
	Tempo *float32 `json:"tempo,omitempty"`
	// The confidence, from 0.0 to 1.0, of the reliability of the tempo. Some tracks contain tempo changes or sounds which don't contain tempo (like pure speech) which would correspond to a low value in this field.
	TempoConfidence *float32 `json:"tempo_confidence,omitempty"`
	// The estimated overall key of the section. The values in this field ranging from 0 to 11 mapping to pitches using standard Pitch Class notation (E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on). If no key was detected, the value is -1.
	Key *int32 `json:"key,omitempty"`
	// The confidence, from 0.0 to 1.0, of the reliability of the key. Songs with many key changes may correspond to low values in this field.
	KeyConfidence *float32 `json:"key_confidence,omitempty"`
	// Indicates the modality (major or minor) of a section, the type of scale from which its melodic content is derived. This field will contain a 0 for \"minor\", a 1 for \"major\", or a -1 for no result. Note that the major key (e.g. C major) could more likely be confused with the minor key at 3 semitones lower (e.g. A minor) as both keys carry the same pitches.
	Mode *float32 `json:"mode,omitempty"`
	// The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
	ModeConfidence *float32 `json:"mode_confidence,omitempty"`
	// An estimated time signature. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure). The time signature ranges from 3 to 7 indicating time signatures of \"3/4\", to \"7/4\".
	TimeSignature *int32 `json:"time_signature,omitempty"`
	// The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`. Sections with time signature changes may correspond to low values in this field.
	TimeSignatureConfidence *float32 `json:"time_signature_confidence,omitempty"`
}

// NewSectionObject instantiates a new SectionObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSectionObject() *SectionObject {
	this := SectionObject{}
	return &this
}

// NewSectionObjectWithDefaults instantiates a new SectionObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSectionObjectWithDefaults() *SectionObject {
	this := SectionObject{}
	return &this
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *SectionObject) GetStart() float32 {
	if o == nil || isNil(o.Start) {
		var ret float32
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SectionObject) GetStartOk() (*float32, bool) {
	if o == nil || isNil(o.Start) {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *SectionObject) HasStart() bool {
	if o != nil && !isNil(o.Start) {
		return true
	}

	return false
}

// SetStart gets a reference to the given float32 and assigns it to the Start field.
func (o *SectionObject) SetStart(v float32) {
	o.Start = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *SectionObject) GetDuration() float32 {
	if o == nil || isNil(o.Duration) {
		var ret float32
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SectionObject) GetDurationOk() (*float32, bool) {
	if o == nil || isNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *SectionObject) HasDuration() bool {
	if o != nil && !isNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given float32 and assigns it to the Duration field.
func (o *SectionObject) SetDuration(v float32) {
	o.Duration = &v
}

// GetConfidence returns the Confidence field value if set, zero value otherwise.
func (o *SectionObject) GetConfidence() float32 {
	if o == nil || isNil(o.Confidence) {
		var ret float32
		return ret
	}
	return *o.Confidence
}

// GetConfidenceOk returns a tuple with the Confidence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SectionObject) GetConfidenceOk() (*float32, bool) {
	if o == nil || isNil(o.Confidence) {
		return nil, false
	}
	return o.Confidence, true
}

// HasConfidence returns a boolean if a field has been set.
func (o *SectionObject) HasConfidence() bool {
	if o != nil && !isNil(o.Confidence) {
		return true
	}

	return false
}

// SetConfidence gets a reference to the given float32 and assigns it to the Confidence field.
func (o *SectionObject) SetConfidence(v float32) {
	o.Confidence = &v
}

// GetLoudness returns the Loudness field value if set, zero value otherwise.
func (o *SectionObject) GetLoudness() float32 {
	if o == nil || isNil(o.Loudness) {
		var ret float32
		return ret
	}
	return *o.Loudness
}

// GetLoudnessOk returns a tuple with the Loudness field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SectionObject) GetLoudnessOk() (*float32, bool) {
	if o == nil || isNil(o.Loudness) {
		return nil, false
	}
	return o.Loudness, true
}

// HasLoudness returns a boolean if a field has been set.
func (o *SectionObject) HasLoudness() bool {
	if o != nil && !isNil(o.Loudness) {
		return true
	}

	return false
}

// SetLoudness gets a reference to the given float32 and assigns it to the Loudness field.
func (o *SectionObject) SetLoudness(v float32) {
	o.Loudness = &v
}

// GetTempo returns the Tempo field value if set, zero value otherwise.
func (o *SectionObject) GetTempo() float32 {
	if o == nil || isNil(o.Tempo) {
		var ret float32
		return ret
	}
	return *o.Tempo
}

// GetTempoOk returns a tuple with the Tempo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SectionObject) GetTempoOk() (*float32, bool) {
	if o == nil || isNil(o.Tempo) {
		return nil, false
	}
	return o.Tempo, true
}

// HasTempo returns a boolean if a field has been set.
func (o *SectionObject) HasTempo() bool {
	if o != nil && !isNil(o.Tempo) {
		return true
	}

	return false
}

// SetTempo gets a reference to the given float32 and assigns it to the Tempo field.
func (o *SectionObject) SetTempo(v float32) {
	o.Tempo = &v
}

// GetTempoConfidence returns the TempoConfidence field value if set, zero value otherwise.
func (o *SectionObject) GetTempoConfidence() float32 {
	if o == nil || isNil(o.TempoConfidence) {
		var ret float32
		return ret
	}
	return *o.TempoConfidence
}

// GetTempoConfidenceOk returns a tuple with the TempoConfidence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SectionObject) GetTempoConfidenceOk() (*float32, bool) {
	if o == nil || isNil(o.TempoConfidence) {
		return nil, false
	}
	return o.TempoConfidence, true
}

// HasTempoConfidence returns a boolean if a field has been set.
func (o *SectionObject) HasTempoConfidence() bool {
	if o != nil && !isNil(o.TempoConfidence) {
		return true
	}

	return false
}

// SetTempoConfidence gets a reference to the given float32 and assigns it to the TempoConfidence field.
func (o *SectionObject) SetTempoConfidence(v float32) {
	o.TempoConfidence = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *SectionObject) GetKey() int32 {
	if o == nil || isNil(o.Key) {
		var ret int32
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SectionObject) GetKeyOk() (*int32, bool) {
	if o == nil || isNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *SectionObject) HasKey() bool {
	if o != nil && !isNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given int32 and assigns it to the Key field.
func (o *SectionObject) SetKey(v int32) {
	o.Key = &v
}

// GetKeyConfidence returns the KeyConfidence field value if set, zero value otherwise.
func (o *SectionObject) GetKeyConfidence() float32 {
	if o == nil || isNil(o.KeyConfidence) {
		var ret float32
		return ret
	}
	return *o.KeyConfidence
}

// GetKeyConfidenceOk returns a tuple with the KeyConfidence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SectionObject) GetKeyConfidenceOk() (*float32, bool) {
	if o == nil || isNil(o.KeyConfidence) {
		return nil, false
	}
	return o.KeyConfidence, true
}

// HasKeyConfidence returns a boolean if a field has been set.
func (o *SectionObject) HasKeyConfidence() bool {
	if o != nil && !isNil(o.KeyConfidence) {
		return true
	}

	return false
}

// SetKeyConfidence gets a reference to the given float32 and assigns it to the KeyConfidence field.
func (o *SectionObject) SetKeyConfidence(v float32) {
	o.KeyConfidence = &v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *SectionObject) GetMode() float32 {
	if o == nil || isNil(o.Mode) {
		var ret float32
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SectionObject) GetModeOk() (*float32, bool) {
	if o == nil || isNil(o.Mode) {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *SectionObject) HasMode() bool {
	if o != nil && !isNil(o.Mode) {
		return true
	}

	return false
}

// SetMode gets a reference to the given float32 and assigns it to the Mode field.
func (o *SectionObject) SetMode(v float32) {
	o.Mode = &v
}

// GetModeConfidence returns the ModeConfidence field value if set, zero value otherwise.
func (o *SectionObject) GetModeConfidence() float32 {
	if o == nil || isNil(o.ModeConfidence) {
		var ret float32
		return ret
	}
	return *o.ModeConfidence
}

// GetModeConfidenceOk returns a tuple with the ModeConfidence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SectionObject) GetModeConfidenceOk() (*float32, bool) {
	if o == nil || isNil(o.ModeConfidence) {
		return nil, false
	}
	return o.ModeConfidence, true
}

// HasModeConfidence returns a boolean if a field has been set.
func (o *SectionObject) HasModeConfidence() bool {
	if o != nil && !isNil(o.ModeConfidence) {
		return true
	}

	return false
}

// SetModeConfidence gets a reference to the given float32 and assigns it to the ModeConfidence field.
func (o *SectionObject) SetModeConfidence(v float32) {
	o.ModeConfidence = &v
}

// GetTimeSignature returns the TimeSignature field value if set, zero value otherwise.
func (o *SectionObject) GetTimeSignature() int32 {
	if o == nil || isNil(o.TimeSignature) {
		var ret int32
		return ret
	}
	return *o.TimeSignature
}

// GetTimeSignatureOk returns a tuple with the TimeSignature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SectionObject) GetTimeSignatureOk() (*int32, bool) {
	if o == nil || isNil(o.TimeSignature) {
		return nil, false
	}
	return o.TimeSignature, true
}

// HasTimeSignature returns a boolean if a field has been set.
func (o *SectionObject) HasTimeSignature() bool {
	if o != nil && !isNil(o.TimeSignature) {
		return true
	}

	return false
}

// SetTimeSignature gets a reference to the given int32 and assigns it to the TimeSignature field.
func (o *SectionObject) SetTimeSignature(v int32) {
	o.TimeSignature = &v
}

// GetTimeSignatureConfidence returns the TimeSignatureConfidence field value if set, zero value otherwise.
func (o *SectionObject) GetTimeSignatureConfidence() float32 {
	if o == nil || isNil(o.TimeSignatureConfidence) {
		var ret float32
		return ret
	}
	return *o.TimeSignatureConfidence
}

// GetTimeSignatureConfidenceOk returns a tuple with the TimeSignatureConfidence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SectionObject) GetTimeSignatureConfidenceOk() (*float32, bool) {
	if o == nil || isNil(o.TimeSignatureConfidence) {
		return nil, false
	}
	return o.TimeSignatureConfidence, true
}

// HasTimeSignatureConfidence returns a boolean if a field has been set.
func (o *SectionObject) HasTimeSignatureConfidence() bool {
	if o != nil && !isNil(o.TimeSignatureConfidence) {
		return true
	}

	return false
}

// SetTimeSignatureConfidence gets a reference to the given float32 and assigns it to the TimeSignatureConfidence field.
func (o *SectionObject) SetTimeSignatureConfidence(v float32) {
	o.TimeSignatureConfidence = &v
}

func (o SectionObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SectionObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Start) {
		toSerialize["start"] = o.Start
	}
	if !isNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	if !isNil(o.Confidence) {
		toSerialize["confidence"] = o.Confidence
	}
	if !isNil(o.Loudness) {
		toSerialize["loudness"] = o.Loudness
	}
	if !isNil(o.Tempo) {
		toSerialize["tempo"] = o.Tempo
	}
	if !isNil(o.TempoConfidence) {
		toSerialize["tempo_confidence"] = o.TempoConfidence
	}
	if !isNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !isNil(o.KeyConfidence) {
		toSerialize["key_confidence"] = o.KeyConfidence
	}
	if !isNil(o.Mode) {
		toSerialize["mode"] = o.Mode
	}
	if !isNil(o.ModeConfidence) {
		toSerialize["mode_confidence"] = o.ModeConfidence
	}
	if !isNil(o.TimeSignature) {
		toSerialize["time_signature"] = o.TimeSignature
	}
	if !isNil(o.TimeSignatureConfidence) {
		toSerialize["time_signature_confidence"] = o.TimeSignatureConfidence
	}
	return toSerialize, nil
}

type NullableSectionObject struct {
	value *SectionObject
	isSet bool
}

func (v NullableSectionObject) Get() *SectionObject {
	return v.value
}

func (v *NullableSectionObject) Set(val *SectionObject) {
	v.value = val
	v.isSet = true
}

func (v NullableSectionObject) IsSet() bool {
	return v.isSet
}

func (v *NullableSectionObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSectionObject(val *SectionObject) *NullableSectionObject {
	return &NullableSectionObject{value: val, isSet: true}
}

func (v NullableSectionObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSectionObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


