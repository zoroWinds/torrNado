/*
Spotify Web API

You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AudioAnalysisObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AudioAnalysisObject{}

// AudioAnalysisObject struct for AudioAnalysisObject
type AudioAnalysisObject struct {
	Meta *AudioAnalysisObjectMeta `json:"meta,omitempty"`
	Track *AudioAnalysisObjectTrack `json:"track,omitempty"`
	// The time intervals of the bars throughout the track. A bar (or measure) is a segment of time defined as a given number of beats.
	Bars []TimeIntervalObject `json:"bars,omitempty"`
	// The time intervals of beats throughout the track. A beat is the basic time unit of a piece of music; for example, each tick of a metronome. Beats are typically multiples of tatums.
	Beats []TimeIntervalObject `json:"beats,omitempty"`
	// Sections are defined by large variations in rhythm or timbre, e.g. chorus, verse, bridge, guitar solo, etc. Each section contains its own descriptions of tempo, key, mode, time_signature, and loudness.
	Sections []SectionObject `json:"sections,omitempty"`
	// Each segment contains a roughly conisistent sound throughout its duration.
	Segments []SegmentObject `json:"segments,omitempty"`
	// A tatum represents the lowest regular pulse train that a listener intuitively infers from the timing of perceived musical events (segments).
	Tatums []TimeIntervalObject `json:"tatums,omitempty"`
}

// NewAudioAnalysisObject instantiates a new AudioAnalysisObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAudioAnalysisObject() *AudioAnalysisObject {
	this := AudioAnalysisObject{}
	return &this
}

// NewAudioAnalysisObjectWithDefaults instantiates a new AudioAnalysisObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAudioAnalysisObjectWithDefaults() *AudioAnalysisObject {
	this := AudioAnalysisObject{}
	return &this
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *AudioAnalysisObject) GetMeta() AudioAnalysisObjectMeta {
	if o == nil || isNil(o.Meta) {
		var ret AudioAnalysisObjectMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudioAnalysisObject) GetMetaOk() (*AudioAnalysisObjectMeta, bool) {
	if o == nil || isNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *AudioAnalysisObject) HasMeta() bool {
	if o != nil && !isNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given AudioAnalysisObjectMeta and assigns it to the Meta field.
func (o *AudioAnalysisObject) SetMeta(v AudioAnalysisObjectMeta) {
	o.Meta = &v
}

// GetTrack returns the Track field value if set, zero value otherwise.
func (o *AudioAnalysisObject) GetTrack() AudioAnalysisObjectTrack {
	if o == nil || isNil(o.Track) {
		var ret AudioAnalysisObjectTrack
		return ret
	}
	return *o.Track
}

// GetTrackOk returns a tuple with the Track field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudioAnalysisObject) GetTrackOk() (*AudioAnalysisObjectTrack, bool) {
	if o == nil || isNil(o.Track) {
		return nil, false
	}
	return o.Track, true
}

// HasTrack returns a boolean if a field has been set.
func (o *AudioAnalysisObject) HasTrack() bool {
	if o != nil && !isNil(o.Track) {
		return true
	}

	return false
}

// SetTrack gets a reference to the given AudioAnalysisObjectTrack and assigns it to the Track field.
func (o *AudioAnalysisObject) SetTrack(v AudioAnalysisObjectTrack) {
	o.Track = &v
}

// GetBars returns the Bars field value if set, zero value otherwise.
func (o *AudioAnalysisObject) GetBars() []TimeIntervalObject {
	if o == nil || isNil(o.Bars) {
		var ret []TimeIntervalObject
		return ret
	}
	return o.Bars
}

// GetBarsOk returns a tuple with the Bars field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudioAnalysisObject) GetBarsOk() ([]TimeIntervalObject, bool) {
	if o == nil || isNil(o.Bars) {
		return nil, false
	}
	return o.Bars, true
}

// HasBars returns a boolean if a field has been set.
func (o *AudioAnalysisObject) HasBars() bool {
	if o != nil && !isNil(o.Bars) {
		return true
	}

	return false
}

// SetBars gets a reference to the given []TimeIntervalObject and assigns it to the Bars field.
func (o *AudioAnalysisObject) SetBars(v []TimeIntervalObject) {
	o.Bars = v
}

// GetBeats returns the Beats field value if set, zero value otherwise.
func (o *AudioAnalysisObject) GetBeats() []TimeIntervalObject {
	if o == nil || isNil(o.Beats) {
		var ret []TimeIntervalObject
		return ret
	}
	return o.Beats
}

// GetBeatsOk returns a tuple with the Beats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudioAnalysisObject) GetBeatsOk() ([]TimeIntervalObject, bool) {
	if o == nil || isNil(o.Beats) {
		return nil, false
	}
	return o.Beats, true
}

// HasBeats returns a boolean if a field has been set.
func (o *AudioAnalysisObject) HasBeats() bool {
	if o != nil && !isNil(o.Beats) {
		return true
	}

	return false
}

// SetBeats gets a reference to the given []TimeIntervalObject and assigns it to the Beats field.
func (o *AudioAnalysisObject) SetBeats(v []TimeIntervalObject) {
	o.Beats = v
}

// GetSections returns the Sections field value if set, zero value otherwise.
func (o *AudioAnalysisObject) GetSections() []SectionObject {
	if o == nil || isNil(o.Sections) {
		var ret []SectionObject
		return ret
	}
	return o.Sections
}

// GetSectionsOk returns a tuple with the Sections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudioAnalysisObject) GetSectionsOk() ([]SectionObject, bool) {
	if o == nil || isNil(o.Sections) {
		return nil, false
	}
	return o.Sections, true
}

// HasSections returns a boolean if a field has been set.
func (o *AudioAnalysisObject) HasSections() bool {
	if o != nil && !isNil(o.Sections) {
		return true
	}

	return false
}

// SetSections gets a reference to the given []SectionObject and assigns it to the Sections field.
func (o *AudioAnalysisObject) SetSections(v []SectionObject) {
	o.Sections = v
}

// GetSegments returns the Segments field value if set, zero value otherwise.
func (o *AudioAnalysisObject) GetSegments() []SegmentObject {
	if o == nil || isNil(o.Segments) {
		var ret []SegmentObject
		return ret
	}
	return o.Segments
}

// GetSegmentsOk returns a tuple with the Segments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudioAnalysisObject) GetSegmentsOk() ([]SegmentObject, bool) {
	if o == nil || isNil(o.Segments) {
		return nil, false
	}
	return o.Segments, true
}

// HasSegments returns a boolean if a field has been set.
func (o *AudioAnalysisObject) HasSegments() bool {
	if o != nil && !isNil(o.Segments) {
		return true
	}

	return false
}

// SetSegments gets a reference to the given []SegmentObject and assigns it to the Segments field.
func (o *AudioAnalysisObject) SetSegments(v []SegmentObject) {
	o.Segments = v
}

// GetTatums returns the Tatums field value if set, zero value otherwise.
func (o *AudioAnalysisObject) GetTatums() []TimeIntervalObject {
	if o == nil || isNil(o.Tatums) {
		var ret []TimeIntervalObject
		return ret
	}
	return o.Tatums
}

// GetTatumsOk returns a tuple with the Tatums field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudioAnalysisObject) GetTatumsOk() ([]TimeIntervalObject, bool) {
	if o == nil || isNil(o.Tatums) {
		return nil, false
	}
	return o.Tatums, true
}

// HasTatums returns a boolean if a field has been set.
func (o *AudioAnalysisObject) HasTatums() bool {
	if o != nil && !isNil(o.Tatums) {
		return true
	}

	return false
}

// SetTatums gets a reference to the given []TimeIntervalObject and assigns it to the Tatums field.
func (o *AudioAnalysisObject) SetTatums(v []TimeIntervalObject) {
	o.Tatums = v
}

func (o AudioAnalysisObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AudioAnalysisObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !isNil(o.Track) {
		toSerialize["track"] = o.Track
	}
	if !isNil(o.Bars) {
		toSerialize["bars"] = o.Bars
	}
	if !isNil(o.Beats) {
		toSerialize["beats"] = o.Beats
	}
	if !isNil(o.Sections) {
		toSerialize["sections"] = o.Sections
	}
	if !isNil(o.Segments) {
		toSerialize["segments"] = o.Segments
	}
	if !isNil(o.Tatums) {
		toSerialize["tatums"] = o.Tatums
	}
	return toSerialize, nil
}

type NullableAudioAnalysisObject struct {
	value *AudioAnalysisObject
	isSet bool
}

func (v NullableAudioAnalysisObject) Get() *AudioAnalysisObject {
	return v.value
}

func (v *NullableAudioAnalysisObject) Set(val *AudioAnalysisObject) {
	v.value = val
	v.isSet = true
}

func (v NullableAudioAnalysisObject) IsSet() bool {
	return v.isSet
}

func (v *NullableAudioAnalysisObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAudioAnalysisObject(val *AudioAnalysisObject) *NullableAudioAnalysisObject {
	return &NullableAudioAnalysisObject{value: val, isSet: true}
}

func (v NullableAudioAnalysisObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAudioAnalysisObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


