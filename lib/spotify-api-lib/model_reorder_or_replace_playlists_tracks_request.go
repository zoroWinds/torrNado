/*
Spotify Web API

You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ReorderOrReplacePlaylistsTracksRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReorderOrReplacePlaylistsTracksRequest{}

// ReorderOrReplacePlaylistsTracksRequest struct for ReorderOrReplacePlaylistsTracksRequest
type ReorderOrReplacePlaylistsTracksRequest struct {
	Uris []string `json:"uris,omitempty"`
	// The position of the first item to be reordered. 
	RangeStart *int32 `json:"range_start,omitempty"`
	// The position where the items should be inserted.<br>To reorder the items to the end of the playlist, simply set _insert_before_ to the position after the last item.<br>Examples:<br>To reorder the first item to the last position in a playlist with 10 items, set _range_start_ to 0, and _insert_before_ to 10.<br>To reorder the last item in a playlist with 10 items to the start of the playlist, set _range_start_ to 9, and _insert_before_ to 0. 
	InsertBefore *int32 `json:"insert_before,omitempty"`
	// The amount of items to be reordered. Defaults to 1 if not set.<br>The range of items to be reordered begins from the _range_start_ position, and includes the _range_length_ subsequent items.<br>Example:<br>To move the items at index 9-10 to the start of the playlist, _range_start_ is set to 9, and _range_length_ is set to 2. 
	RangeLength *int32 `json:"range_length,omitempty"`
	// The playlist's snapshot ID against which you want to make the changes. 
	SnapshotId *string `json:"snapshot_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ReorderOrReplacePlaylistsTracksRequest ReorderOrReplacePlaylistsTracksRequest

// NewReorderOrReplacePlaylistsTracksRequest instantiates a new ReorderOrReplacePlaylistsTracksRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReorderOrReplacePlaylistsTracksRequest() *ReorderOrReplacePlaylistsTracksRequest {
	this := ReorderOrReplacePlaylistsTracksRequest{}
	return &this
}

// NewReorderOrReplacePlaylistsTracksRequestWithDefaults instantiates a new ReorderOrReplacePlaylistsTracksRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReorderOrReplacePlaylistsTracksRequestWithDefaults() *ReorderOrReplacePlaylistsTracksRequest {
	this := ReorderOrReplacePlaylistsTracksRequest{}
	return &this
}

// GetUris returns the Uris field value if set, zero value otherwise.
func (o *ReorderOrReplacePlaylistsTracksRequest) GetUris() []string {
	if o == nil || isNil(o.Uris) {
		var ret []string
		return ret
	}
	return o.Uris
}

// GetUrisOk returns a tuple with the Uris field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReorderOrReplacePlaylistsTracksRequest) GetUrisOk() ([]string, bool) {
	if o == nil || isNil(o.Uris) {
		return nil, false
	}
	return o.Uris, true
}

// HasUris returns a boolean if a field has been set.
func (o *ReorderOrReplacePlaylistsTracksRequest) HasUris() bool {
	if o != nil && !isNil(o.Uris) {
		return true
	}

	return false
}

// SetUris gets a reference to the given []string and assigns it to the Uris field.
func (o *ReorderOrReplacePlaylistsTracksRequest) SetUris(v []string) {
	o.Uris = v
}

// GetRangeStart returns the RangeStart field value if set, zero value otherwise.
func (o *ReorderOrReplacePlaylistsTracksRequest) GetRangeStart() int32 {
	if o == nil || isNil(o.RangeStart) {
		var ret int32
		return ret
	}
	return *o.RangeStart
}

// GetRangeStartOk returns a tuple with the RangeStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReorderOrReplacePlaylistsTracksRequest) GetRangeStartOk() (*int32, bool) {
	if o == nil || isNil(o.RangeStart) {
		return nil, false
	}
	return o.RangeStart, true
}

// HasRangeStart returns a boolean if a field has been set.
func (o *ReorderOrReplacePlaylistsTracksRequest) HasRangeStart() bool {
	if o != nil && !isNil(o.RangeStart) {
		return true
	}

	return false
}

// SetRangeStart gets a reference to the given int32 and assigns it to the RangeStart field.
func (o *ReorderOrReplacePlaylistsTracksRequest) SetRangeStart(v int32) {
	o.RangeStart = &v
}

// GetInsertBefore returns the InsertBefore field value if set, zero value otherwise.
func (o *ReorderOrReplacePlaylistsTracksRequest) GetInsertBefore() int32 {
	if o == nil || isNil(o.InsertBefore) {
		var ret int32
		return ret
	}
	return *o.InsertBefore
}

// GetInsertBeforeOk returns a tuple with the InsertBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReorderOrReplacePlaylistsTracksRequest) GetInsertBeforeOk() (*int32, bool) {
	if o == nil || isNil(o.InsertBefore) {
		return nil, false
	}
	return o.InsertBefore, true
}

// HasInsertBefore returns a boolean if a field has been set.
func (o *ReorderOrReplacePlaylistsTracksRequest) HasInsertBefore() bool {
	if o != nil && !isNil(o.InsertBefore) {
		return true
	}

	return false
}

// SetInsertBefore gets a reference to the given int32 and assigns it to the InsertBefore field.
func (o *ReorderOrReplacePlaylistsTracksRequest) SetInsertBefore(v int32) {
	o.InsertBefore = &v
}

// GetRangeLength returns the RangeLength field value if set, zero value otherwise.
func (o *ReorderOrReplacePlaylistsTracksRequest) GetRangeLength() int32 {
	if o == nil || isNil(o.RangeLength) {
		var ret int32
		return ret
	}
	return *o.RangeLength
}

// GetRangeLengthOk returns a tuple with the RangeLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReorderOrReplacePlaylistsTracksRequest) GetRangeLengthOk() (*int32, bool) {
	if o == nil || isNil(o.RangeLength) {
		return nil, false
	}
	return o.RangeLength, true
}

// HasRangeLength returns a boolean if a field has been set.
func (o *ReorderOrReplacePlaylistsTracksRequest) HasRangeLength() bool {
	if o != nil && !isNil(o.RangeLength) {
		return true
	}

	return false
}

// SetRangeLength gets a reference to the given int32 and assigns it to the RangeLength field.
func (o *ReorderOrReplacePlaylistsTracksRequest) SetRangeLength(v int32) {
	o.RangeLength = &v
}

// GetSnapshotId returns the SnapshotId field value if set, zero value otherwise.
func (o *ReorderOrReplacePlaylistsTracksRequest) GetSnapshotId() string {
	if o == nil || isNil(o.SnapshotId) {
		var ret string
		return ret
	}
	return *o.SnapshotId
}

// GetSnapshotIdOk returns a tuple with the SnapshotId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReorderOrReplacePlaylistsTracksRequest) GetSnapshotIdOk() (*string, bool) {
	if o == nil || isNil(o.SnapshotId) {
		return nil, false
	}
	return o.SnapshotId, true
}

// HasSnapshotId returns a boolean if a field has been set.
func (o *ReorderOrReplacePlaylistsTracksRequest) HasSnapshotId() bool {
	if o != nil && !isNil(o.SnapshotId) {
		return true
	}

	return false
}

// SetSnapshotId gets a reference to the given string and assigns it to the SnapshotId field.
func (o *ReorderOrReplacePlaylistsTracksRequest) SetSnapshotId(v string) {
	o.SnapshotId = &v
}

func (o ReorderOrReplacePlaylistsTracksRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReorderOrReplacePlaylistsTracksRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Uris) {
		toSerialize["uris"] = o.Uris
	}
	if !isNil(o.RangeStart) {
		toSerialize["range_start"] = o.RangeStart
	}
	if !isNil(o.InsertBefore) {
		toSerialize["insert_before"] = o.InsertBefore
	}
	if !isNil(o.RangeLength) {
		toSerialize["range_length"] = o.RangeLength
	}
	if !isNil(o.SnapshotId) {
		toSerialize["snapshot_id"] = o.SnapshotId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ReorderOrReplacePlaylistsTracksRequest) UnmarshalJSON(bytes []byte) (err error) {
	varReorderOrReplacePlaylistsTracksRequest := _ReorderOrReplacePlaylistsTracksRequest{}

	if err = json.Unmarshal(bytes, &varReorderOrReplacePlaylistsTracksRequest); err == nil {
		*o = ReorderOrReplacePlaylistsTracksRequest(varReorderOrReplacePlaylistsTracksRequest)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "uris")
		delete(additionalProperties, "range_start")
		delete(additionalProperties, "insert_before")
		delete(additionalProperties, "range_length")
		delete(additionalProperties, "snapshot_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableReorderOrReplacePlaylistsTracksRequest struct {
	value *ReorderOrReplacePlaylistsTracksRequest
	isSet bool
}

func (v NullableReorderOrReplacePlaylistsTracksRequest) Get() *ReorderOrReplacePlaylistsTracksRequest {
	return v.value
}

func (v *NullableReorderOrReplacePlaylistsTracksRequest) Set(val *ReorderOrReplacePlaylistsTracksRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableReorderOrReplacePlaylistsTracksRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableReorderOrReplacePlaylistsTracksRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReorderOrReplacePlaylistsTracksRequest(val *ReorderOrReplacePlaylistsTracksRequest) *NullableReorderOrReplacePlaylistsTracksRequest {
	return &NullableReorderOrReplacePlaylistsTracksRequest{value: val, isSet: true}
}

func (v NullableReorderOrReplacePlaylistsTracksRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReorderOrReplacePlaylistsTracksRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


