/*
Spotify Web API

You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ExplicitContentSettingsObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExplicitContentSettingsObject{}

// ExplicitContentSettingsObject struct for ExplicitContentSettingsObject
type ExplicitContentSettingsObject struct {
	// When `true`, indicates that explicit content should not be played. 
	FilterEnabled *bool `json:"filter_enabled,omitempty"`
	// When `true`, indicates that the explicit content setting is locked and can't be changed by the user. 
	FilterLocked *bool `json:"filter_locked,omitempty"`
}

// NewExplicitContentSettingsObject instantiates a new ExplicitContentSettingsObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExplicitContentSettingsObject() *ExplicitContentSettingsObject {
	this := ExplicitContentSettingsObject{}
	return &this
}

// NewExplicitContentSettingsObjectWithDefaults instantiates a new ExplicitContentSettingsObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExplicitContentSettingsObjectWithDefaults() *ExplicitContentSettingsObject {
	this := ExplicitContentSettingsObject{}
	return &this
}

// GetFilterEnabled returns the FilterEnabled field value if set, zero value otherwise.
func (o *ExplicitContentSettingsObject) GetFilterEnabled() bool {
	if o == nil || isNil(o.FilterEnabled) {
		var ret bool
		return ret
	}
	return *o.FilterEnabled
}

// GetFilterEnabledOk returns a tuple with the FilterEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplicitContentSettingsObject) GetFilterEnabledOk() (*bool, bool) {
	if o == nil || isNil(o.FilterEnabled) {
		return nil, false
	}
	return o.FilterEnabled, true
}

// HasFilterEnabled returns a boolean if a field has been set.
func (o *ExplicitContentSettingsObject) HasFilterEnabled() bool {
	if o != nil && !isNil(o.FilterEnabled) {
		return true
	}

	return false
}

// SetFilterEnabled gets a reference to the given bool and assigns it to the FilterEnabled field.
func (o *ExplicitContentSettingsObject) SetFilterEnabled(v bool) {
	o.FilterEnabled = &v
}

// GetFilterLocked returns the FilterLocked field value if set, zero value otherwise.
func (o *ExplicitContentSettingsObject) GetFilterLocked() bool {
	if o == nil || isNil(o.FilterLocked) {
		var ret bool
		return ret
	}
	return *o.FilterLocked
}

// GetFilterLockedOk returns a tuple with the FilterLocked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExplicitContentSettingsObject) GetFilterLockedOk() (*bool, bool) {
	if o == nil || isNil(o.FilterLocked) {
		return nil, false
	}
	return o.FilterLocked, true
}

// HasFilterLocked returns a boolean if a field has been set.
func (o *ExplicitContentSettingsObject) HasFilterLocked() bool {
	if o != nil && !isNil(o.FilterLocked) {
		return true
	}

	return false
}

// SetFilterLocked gets a reference to the given bool and assigns it to the FilterLocked field.
func (o *ExplicitContentSettingsObject) SetFilterLocked(v bool) {
	o.FilterLocked = &v
}

func (o ExplicitContentSettingsObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExplicitContentSettingsObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.FilterEnabled) {
		toSerialize["filter_enabled"] = o.FilterEnabled
	}
	if !isNil(o.FilterLocked) {
		toSerialize["filter_locked"] = o.FilterLocked
	}
	return toSerialize, nil
}

type NullableExplicitContentSettingsObject struct {
	value *ExplicitContentSettingsObject
	isSet bool
}

func (v NullableExplicitContentSettingsObject) Get() *ExplicitContentSettingsObject {
	return v.value
}

func (v *NullableExplicitContentSettingsObject) Set(val *ExplicitContentSettingsObject) {
	v.value = val
	v.isSet = true
}

func (v NullableExplicitContentSettingsObject) IsSet() bool {
	return v.isSet
}

func (v *NullableExplicitContentSettingsObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExplicitContentSettingsObject(val *ExplicitContentSettingsObject) *NullableExplicitContentSettingsObject {
	return &NullableExplicitContentSettingsObject{value: val, isSet: true}
}

func (v NullableExplicitContentSettingsObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExplicitContentSettingsObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


