/*
Spotify Web API

You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AudioAnalysisObjectTrack type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AudioAnalysisObjectTrack{}

// AudioAnalysisObjectTrack struct for AudioAnalysisObjectTrack
type AudioAnalysisObjectTrack struct {
	// The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
	NumSamples *int32 `json:"num_samples,omitempty"`
	// Length of the track in seconds.
	Duration *float32 `json:"duration,omitempty"`
	// This field will always contain the empty string.
	SampleMd5 *string `json:"sample_md5,omitempty"`
	// An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
	OffsetSeconds *int32 `json:"offset_seconds,omitempty"`
	// The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
	WindowSeconds *int32 `json:"window_seconds,omitempty"`
	// The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
	AnalysisSampleRate *int32 `json:"analysis_sample_rate,omitempty"`
	// The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
	AnalysisChannels *int32 `json:"analysis_channels,omitempty"`
	// The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
	EndOfFadeIn *float32 `json:"end_of_fade_in,omitempty"`
	// The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
	StartOfFadeOut *float32 `json:"start_of_fade_out,omitempty"`
	// The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks. Loudness is the quality of a sound that is the primary psychological correlate of physical strength (amplitude). Values typically range between -60 and 0 db. 
	Loudness *float32 `json:"loudness,omitempty"`
	// The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration. 
	Tempo *float32 `json:"tempo,omitempty"`
	// The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
	TempoConfidence *float32 `json:"tempo_confidence,omitempty"`
	// An estimated time signature. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure). The time signature ranges from 3 to 7 indicating time signatures of \"3/4\", to \"7/4\".
	TimeSignature *int32 `json:"time_signature,omitempty"`
	// The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
	TimeSignatureConfidence *float32 `json:"time_signature_confidence,omitempty"`
	// The key the track is in. Integers map to pitches using standard [Pitch Class notation](https://en.wikipedia.org/wiki/Pitch_class). E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on. If no key was detected, the value is -1. 
	Key *int32 `json:"key,omitempty"`
	// The confidence, from 0.0 to 1.0, of the reliability of the `key`.
	KeyConfidence *float32 `json:"key_confidence,omitempty"`
	// Mode indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived. Major is represented by 1 and minor is 0. 
	Mode *int32 `json:"mode,omitempty"`
	// The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
	ModeConfidence *float32 `json:"mode_confidence,omitempty"`
	// An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
	Codestring *string `json:"codestring,omitempty"`
	// A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
	CodeVersion *float32 `json:"code_version,omitempty"`
	// An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
	Echoprintstring *string `json:"echoprintstring,omitempty"`
	// A version number for the EchoPrint format used in the echoprintstring field.
	EchoprintVersion *float32 `json:"echoprint_version,omitempty"`
	// A [Synchstring](https://github.com/echonest/synchdata) for this track.
	Synchstring *string `json:"synchstring,omitempty"`
	// A version number for the Synchstring used in the synchstring field.
	SynchVersion *float32 `json:"synch_version,omitempty"`
	// A Rhythmstring for this track. The format of this string is similar to the Synchstring.
	Rhythmstring *string `json:"rhythmstring,omitempty"`
	// A version number for the Rhythmstring used in the rhythmstring field.
	RhythmVersion *float32 `json:"rhythm_version,omitempty"`
}

// NewAudioAnalysisObjectTrack instantiates a new AudioAnalysisObjectTrack object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAudioAnalysisObjectTrack() *AudioAnalysisObjectTrack {
	this := AudioAnalysisObjectTrack{}
	return &this
}

// NewAudioAnalysisObjectTrackWithDefaults instantiates a new AudioAnalysisObjectTrack object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAudioAnalysisObjectTrackWithDefaults() *AudioAnalysisObjectTrack {
	this := AudioAnalysisObjectTrack{}
	return &this
}

// GetNumSamples returns the NumSamples field value if set, zero value otherwise.
func (o *AudioAnalysisObjectTrack) GetNumSamples() int32 {
	if o == nil || isNil(o.NumSamples) {
		var ret int32
		return ret
	}
	return *o.NumSamples
}

// GetNumSamplesOk returns a tuple with the NumSamples field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudioAnalysisObjectTrack) GetNumSamplesOk() (*int32, bool) {
	if o == nil || isNil(o.NumSamples) {
		return nil, false
	}
	return o.NumSamples, true
}

// HasNumSamples returns a boolean if a field has been set.
func (o *AudioAnalysisObjectTrack) HasNumSamples() bool {
	if o != nil && !isNil(o.NumSamples) {
		return true
	}

	return false
}

// SetNumSamples gets a reference to the given int32 and assigns it to the NumSamples field.
func (o *AudioAnalysisObjectTrack) SetNumSamples(v int32) {
	o.NumSamples = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *AudioAnalysisObjectTrack) GetDuration() float32 {
	if o == nil || isNil(o.Duration) {
		var ret float32
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudioAnalysisObjectTrack) GetDurationOk() (*float32, bool) {
	if o == nil || isNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *AudioAnalysisObjectTrack) HasDuration() bool {
	if o != nil && !isNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given float32 and assigns it to the Duration field.
func (o *AudioAnalysisObjectTrack) SetDuration(v float32) {
	o.Duration = &v
}

// GetSampleMd5 returns the SampleMd5 field value if set, zero value otherwise.
func (o *AudioAnalysisObjectTrack) GetSampleMd5() string {
	if o == nil || isNil(o.SampleMd5) {
		var ret string
		return ret
	}
	return *o.SampleMd5
}

// GetSampleMd5Ok returns a tuple with the SampleMd5 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudioAnalysisObjectTrack) GetSampleMd5Ok() (*string, bool) {
	if o == nil || isNil(o.SampleMd5) {
		return nil, false
	}
	return o.SampleMd5, true
}

// HasSampleMd5 returns a boolean if a field has been set.
func (o *AudioAnalysisObjectTrack) HasSampleMd5() bool {
	if o != nil && !isNil(o.SampleMd5) {
		return true
	}

	return false
}

// SetSampleMd5 gets a reference to the given string and assigns it to the SampleMd5 field.
func (o *AudioAnalysisObjectTrack) SetSampleMd5(v string) {
	o.SampleMd5 = &v
}

// GetOffsetSeconds returns the OffsetSeconds field value if set, zero value otherwise.
func (o *AudioAnalysisObjectTrack) GetOffsetSeconds() int32 {
	if o == nil || isNil(o.OffsetSeconds) {
		var ret int32
		return ret
	}
	return *o.OffsetSeconds
}

// GetOffsetSecondsOk returns a tuple with the OffsetSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudioAnalysisObjectTrack) GetOffsetSecondsOk() (*int32, bool) {
	if o == nil || isNil(o.OffsetSeconds) {
		return nil, false
	}
	return o.OffsetSeconds, true
}

// HasOffsetSeconds returns a boolean if a field has been set.
func (o *AudioAnalysisObjectTrack) HasOffsetSeconds() bool {
	if o != nil && !isNil(o.OffsetSeconds) {
		return true
	}

	return false
}

// SetOffsetSeconds gets a reference to the given int32 and assigns it to the OffsetSeconds field.
func (o *AudioAnalysisObjectTrack) SetOffsetSeconds(v int32) {
	o.OffsetSeconds = &v
}

// GetWindowSeconds returns the WindowSeconds field value if set, zero value otherwise.
func (o *AudioAnalysisObjectTrack) GetWindowSeconds() int32 {
	if o == nil || isNil(o.WindowSeconds) {
		var ret int32
		return ret
	}
	return *o.WindowSeconds
}

// GetWindowSecondsOk returns a tuple with the WindowSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudioAnalysisObjectTrack) GetWindowSecondsOk() (*int32, bool) {
	if o == nil || isNil(o.WindowSeconds) {
		return nil, false
	}
	return o.WindowSeconds, true
}

// HasWindowSeconds returns a boolean if a field has been set.
func (o *AudioAnalysisObjectTrack) HasWindowSeconds() bool {
	if o != nil && !isNil(o.WindowSeconds) {
		return true
	}

	return false
}

// SetWindowSeconds gets a reference to the given int32 and assigns it to the WindowSeconds field.
func (o *AudioAnalysisObjectTrack) SetWindowSeconds(v int32) {
	o.WindowSeconds = &v
}

// GetAnalysisSampleRate returns the AnalysisSampleRate field value if set, zero value otherwise.
func (o *AudioAnalysisObjectTrack) GetAnalysisSampleRate() int32 {
	if o == nil || isNil(o.AnalysisSampleRate) {
		var ret int32
		return ret
	}
	return *o.AnalysisSampleRate
}

// GetAnalysisSampleRateOk returns a tuple with the AnalysisSampleRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudioAnalysisObjectTrack) GetAnalysisSampleRateOk() (*int32, bool) {
	if o == nil || isNil(o.AnalysisSampleRate) {
		return nil, false
	}
	return o.AnalysisSampleRate, true
}

// HasAnalysisSampleRate returns a boolean if a field has been set.
func (o *AudioAnalysisObjectTrack) HasAnalysisSampleRate() bool {
	if o != nil && !isNil(o.AnalysisSampleRate) {
		return true
	}

	return false
}

// SetAnalysisSampleRate gets a reference to the given int32 and assigns it to the AnalysisSampleRate field.
func (o *AudioAnalysisObjectTrack) SetAnalysisSampleRate(v int32) {
	o.AnalysisSampleRate = &v
}

// GetAnalysisChannels returns the AnalysisChannels field value if set, zero value otherwise.
func (o *AudioAnalysisObjectTrack) GetAnalysisChannels() int32 {
	if o == nil || isNil(o.AnalysisChannels) {
		var ret int32
		return ret
	}
	return *o.AnalysisChannels
}

// GetAnalysisChannelsOk returns a tuple with the AnalysisChannels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudioAnalysisObjectTrack) GetAnalysisChannelsOk() (*int32, bool) {
	if o == nil || isNil(o.AnalysisChannels) {
		return nil, false
	}
	return o.AnalysisChannels, true
}

// HasAnalysisChannels returns a boolean if a field has been set.
func (o *AudioAnalysisObjectTrack) HasAnalysisChannels() bool {
	if o != nil && !isNil(o.AnalysisChannels) {
		return true
	}

	return false
}

// SetAnalysisChannels gets a reference to the given int32 and assigns it to the AnalysisChannels field.
func (o *AudioAnalysisObjectTrack) SetAnalysisChannels(v int32) {
	o.AnalysisChannels = &v
}

// GetEndOfFadeIn returns the EndOfFadeIn field value if set, zero value otherwise.
func (o *AudioAnalysisObjectTrack) GetEndOfFadeIn() float32 {
	if o == nil || isNil(o.EndOfFadeIn) {
		var ret float32
		return ret
	}
	return *o.EndOfFadeIn
}

// GetEndOfFadeInOk returns a tuple with the EndOfFadeIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudioAnalysisObjectTrack) GetEndOfFadeInOk() (*float32, bool) {
	if o == nil || isNil(o.EndOfFadeIn) {
		return nil, false
	}
	return o.EndOfFadeIn, true
}

// HasEndOfFadeIn returns a boolean if a field has been set.
func (o *AudioAnalysisObjectTrack) HasEndOfFadeIn() bool {
	if o != nil && !isNil(o.EndOfFadeIn) {
		return true
	}

	return false
}

// SetEndOfFadeIn gets a reference to the given float32 and assigns it to the EndOfFadeIn field.
func (o *AudioAnalysisObjectTrack) SetEndOfFadeIn(v float32) {
	o.EndOfFadeIn = &v
}

// GetStartOfFadeOut returns the StartOfFadeOut field value if set, zero value otherwise.
func (o *AudioAnalysisObjectTrack) GetStartOfFadeOut() float32 {
	if o == nil || isNil(o.StartOfFadeOut) {
		var ret float32
		return ret
	}
	return *o.StartOfFadeOut
}

// GetStartOfFadeOutOk returns a tuple with the StartOfFadeOut field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudioAnalysisObjectTrack) GetStartOfFadeOutOk() (*float32, bool) {
	if o == nil || isNil(o.StartOfFadeOut) {
		return nil, false
	}
	return o.StartOfFadeOut, true
}

// HasStartOfFadeOut returns a boolean if a field has been set.
func (o *AudioAnalysisObjectTrack) HasStartOfFadeOut() bool {
	if o != nil && !isNil(o.StartOfFadeOut) {
		return true
	}

	return false
}

// SetStartOfFadeOut gets a reference to the given float32 and assigns it to the StartOfFadeOut field.
func (o *AudioAnalysisObjectTrack) SetStartOfFadeOut(v float32) {
	o.StartOfFadeOut = &v
}

// GetLoudness returns the Loudness field value if set, zero value otherwise.
func (o *AudioAnalysisObjectTrack) GetLoudness() float32 {
	if o == nil || isNil(o.Loudness) {
		var ret float32
		return ret
	}
	return *o.Loudness
}

// GetLoudnessOk returns a tuple with the Loudness field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudioAnalysisObjectTrack) GetLoudnessOk() (*float32, bool) {
	if o == nil || isNil(o.Loudness) {
		return nil, false
	}
	return o.Loudness, true
}

// HasLoudness returns a boolean if a field has been set.
func (o *AudioAnalysisObjectTrack) HasLoudness() bool {
	if o != nil && !isNil(o.Loudness) {
		return true
	}

	return false
}

// SetLoudness gets a reference to the given float32 and assigns it to the Loudness field.
func (o *AudioAnalysisObjectTrack) SetLoudness(v float32) {
	o.Loudness = &v
}

// GetTempo returns the Tempo field value if set, zero value otherwise.
func (o *AudioAnalysisObjectTrack) GetTempo() float32 {
	if o == nil || isNil(o.Tempo) {
		var ret float32
		return ret
	}
	return *o.Tempo
}

// GetTempoOk returns a tuple with the Tempo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudioAnalysisObjectTrack) GetTempoOk() (*float32, bool) {
	if o == nil || isNil(o.Tempo) {
		return nil, false
	}
	return o.Tempo, true
}

// HasTempo returns a boolean if a field has been set.
func (o *AudioAnalysisObjectTrack) HasTempo() bool {
	if o != nil && !isNil(o.Tempo) {
		return true
	}

	return false
}

// SetTempo gets a reference to the given float32 and assigns it to the Tempo field.
func (o *AudioAnalysisObjectTrack) SetTempo(v float32) {
	o.Tempo = &v
}

// GetTempoConfidence returns the TempoConfidence field value if set, zero value otherwise.
func (o *AudioAnalysisObjectTrack) GetTempoConfidence() float32 {
	if o == nil || isNil(o.TempoConfidence) {
		var ret float32
		return ret
	}
	return *o.TempoConfidence
}

// GetTempoConfidenceOk returns a tuple with the TempoConfidence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudioAnalysisObjectTrack) GetTempoConfidenceOk() (*float32, bool) {
	if o == nil || isNil(o.TempoConfidence) {
		return nil, false
	}
	return o.TempoConfidence, true
}

// HasTempoConfidence returns a boolean if a field has been set.
func (o *AudioAnalysisObjectTrack) HasTempoConfidence() bool {
	if o != nil && !isNil(o.TempoConfidence) {
		return true
	}

	return false
}

// SetTempoConfidence gets a reference to the given float32 and assigns it to the TempoConfidence field.
func (o *AudioAnalysisObjectTrack) SetTempoConfidence(v float32) {
	o.TempoConfidence = &v
}

// GetTimeSignature returns the TimeSignature field value if set, zero value otherwise.
func (o *AudioAnalysisObjectTrack) GetTimeSignature() int32 {
	if o == nil || isNil(o.TimeSignature) {
		var ret int32
		return ret
	}
	return *o.TimeSignature
}

// GetTimeSignatureOk returns a tuple with the TimeSignature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudioAnalysisObjectTrack) GetTimeSignatureOk() (*int32, bool) {
	if o == nil || isNil(o.TimeSignature) {
		return nil, false
	}
	return o.TimeSignature, true
}

// HasTimeSignature returns a boolean if a field has been set.
func (o *AudioAnalysisObjectTrack) HasTimeSignature() bool {
	if o != nil && !isNil(o.TimeSignature) {
		return true
	}

	return false
}

// SetTimeSignature gets a reference to the given int32 and assigns it to the TimeSignature field.
func (o *AudioAnalysisObjectTrack) SetTimeSignature(v int32) {
	o.TimeSignature = &v
}

// GetTimeSignatureConfidence returns the TimeSignatureConfidence field value if set, zero value otherwise.
func (o *AudioAnalysisObjectTrack) GetTimeSignatureConfidence() float32 {
	if o == nil || isNil(o.TimeSignatureConfidence) {
		var ret float32
		return ret
	}
	return *o.TimeSignatureConfidence
}

// GetTimeSignatureConfidenceOk returns a tuple with the TimeSignatureConfidence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudioAnalysisObjectTrack) GetTimeSignatureConfidenceOk() (*float32, bool) {
	if o == nil || isNil(o.TimeSignatureConfidence) {
		return nil, false
	}
	return o.TimeSignatureConfidence, true
}

// HasTimeSignatureConfidence returns a boolean if a field has been set.
func (o *AudioAnalysisObjectTrack) HasTimeSignatureConfidence() bool {
	if o != nil && !isNil(o.TimeSignatureConfidence) {
		return true
	}

	return false
}

// SetTimeSignatureConfidence gets a reference to the given float32 and assigns it to the TimeSignatureConfidence field.
func (o *AudioAnalysisObjectTrack) SetTimeSignatureConfidence(v float32) {
	o.TimeSignatureConfidence = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *AudioAnalysisObjectTrack) GetKey() int32 {
	if o == nil || isNil(o.Key) {
		var ret int32
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudioAnalysisObjectTrack) GetKeyOk() (*int32, bool) {
	if o == nil || isNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *AudioAnalysisObjectTrack) HasKey() bool {
	if o != nil && !isNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given int32 and assigns it to the Key field.
func (o *AudioAnalysisObjectTrack) SetKey(v int32) {
	o.Key = &v
}

// GetKeyConfidence returns the KeyConfidence field value if set, zero value otherwise.
func (o *AudioAnalysisObjectTrack) GetKeyConfidence() float32 {
	if o == nil || isNil(o.KeyConfidence) {
		var ret float32
		return ret
	}
	return *o.KeyConfidence
}

// GetKeyConfidenceOk returns a tuple with the KeyConfidence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudioAnalysisObjectTrack) GetKeyConfidenceOk() (*float32, bool) {
	if o == nil || isNil(o.KeyConfidence) {
		return nil, false
	}
	return o.KeyConfidence, true
}

// HasKeyConfidence returns a boolean if a field has been set.
func (o *AudioAnalysisObjectTrack) HasKeyConfidence() bool {
	if o != nil && !isNil(o.KeyConfidence) {
		return true
	}

	return false
}

// SetKeyConfidence gets a reference to the given float32 and assigns it to the KeyConfidence field.
func (o *AudioAnalysisObjectTrack) SetKeyConfidence(v float32) {
	o.KeyConfidence = &v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *AudioAnalysisObjectTrack) GetMode() int32 {
	if o == nil || isNil(o.Mode) {
		var ret int32
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudioAnalysisObjectTrack) GetModeOk() (*int32, bool) {
	if o == nil || isNil(o.Mode) {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *AudioAnalysisObjectTrack) HasMode() bool {
	if o != nil && !isNil(o.Mode) {
		return true
	}

	return false
}

// SetMode gets a reference to the given int32 and assigns it to the Mode field.
func (o *AudioAnalysisObjectTrack) SetMode(v int32) {
	o.Mode = &v
}

// GetModeConfidence returns the ModeConfidence field value if set, zero value otherwise.
func (o *AudioAnalysisObjectTrack) GetModeConfidence() float32 {
	if o == nil || isNil(o.ModeConfidence) {
		var ret float32
		return ret
	}
	return *o.ModeConfidence
}

// GetModeConfidenceOk returns a tuple with the ModeConfidence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudioAnalysisObjectTrack) GetModeConfidenceOk() (*float32, bool) {
	if o == nil || isNil(o.ModeConfidence) {
		return nil, false
	}
	return o.ModeConfidence, true
}

// HasModeConfidence returns a boolean if a field has been set.
func (o *AudioAnalysisObjectTrack) HasModeConfidence() bool {
	if o != nil && !isNil(o.ModeConfidence) {
		return true
	}

	return false
}

// SetModeConfidence gets a reference to the given float32 and assigns it to the ModeConfidence field.
func (o *AudioAnalysisObjectTrack) SetModeConfidence(v float32) {
	o.ModeConfidence = &v
}

// GetCodestring returns the Codestring field value if set, zero value otherwise.
func (o *AudioAnalysisObjectTrack) GetCodestring() string {
	if o == nil || isNil(o.Codestring) {
		var ret string
		return ret
	}
	return *o.Codestring
}

// GetCodestringOk returns a tuple with the Codestring field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudioAnalysisObjectTrack) GetCodestringOk() (*string, bool) {
	if o == nil || isNil(o.Codestring) {
		return nil, false
	}
	return o.Codestring, true
}

// HasCodestring returns a boolean if a field has been set.
func (o *AudioAnalysisObjectTrack) HasCodestring() bool {
	if o != nil && !isNil(o.Codestring) {
		return true
	}

	return false
}

// SetCodestring gets a reference to the given string and assigns it to the Codestring field.
func (o *AudioAnalysisObjectTrack) SetCodestring(v string) {
	o.Codestring = &v
}

// GetCodeVersion returns the CodeVersion field value if set, zero value otherwise.
func (o *AudioAnalysisObjectTrack) GetCodeVersion() float32 {
	if o == nil || isNil(o.CodeVersion) {
		var ret float32
		return ret
	}
	return *o.CodeVersion
}

// GetCodeVersionOk returns a tuple with the CodeVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudioAnalysisObjectTrack) GetCodeVersionOk() (*float32, bool) {
	if o == nil || isNil(o.CodeVersion) {
		return nil, false
	}
	return o.CodeVersion, true
}

// HasCodeVersion returns a boolean if a field has been set.
func (o *AudioAnalysisObjectTrack) HasCodeVersion() bool {
	if o != nil && !isNil(o.CodeVersion) {
		return true
	}

	return false
}

// SetCodeVersion gets a reference to the given float32 and assigns it to the CodeVersion field.
func (o *AudioAnalysisObjectTrack) SetCodeVersion(v float32) {
	o.CodeVersion = &v
}

// GetEchoprintstring returns the Echoprintstring field value if set, zero value otherwise.
func (o *AudioAnalysisObjectTrack) GetEchoprintstring() string {
	if o == nil || isNil(o.Echoprintstring) {
		var ret string
		return ret
	}
	return *o.Echoprintstring
}

// GetEchoprintstringOk returns a tuple with the Echoprintstring field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudioAnalysisObjectTrack) GetEchoprintstringOk() (*string, bool) {
	if o == nil || isNil(o.Echoprintstring) {
		return nil, false
	}
	return o.Echoprintstring, true
}

// HasEchoprintstring returns a boolean if a field has been set.
func (o *AudioAnalysisObjectTrack) HasEchoprintstring() bool {
	if o != nil && !isNil(o.Echoprintstring) {
		return true
	}

	return false
}

// SetEchoprintstring gets a reference to the given string and assigns it to the Echoprintstring field.
func (o *AudioAnalysisObjectTrack) SetEchoprintstring(v string) {
	o.Echoprintstring = &v
}

// GetEchoprintVersion returns the EchoprintVersion field value if set, zero value otherwise.
func (o *AudioAnalysisObjectTrack) GetEchoprintVersion() float32 {
	if o == nil || isNil(o.EchoprintVersion) {
		var ret float32
		return ret
	}
	return *o.EchoprintVersion
}

// GetEchoprintVersionOk returns a tuple with the EchoprintVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudioAnalysisObjectTrack) GetEchoprintVersionOk() (*float32, bool) {
	if o == nil || isNil(o.EchoprintVersion) {
		return nil, false
	}
	return o.EchoprintVersion, true
}

// HasEchoprintVersion returns a boolean if a field has been set.
func (o *AudioAnalysisObjectTrack) HasEchoprintVersion() bool {
	if o != nil && !isNil(o.EchoprintVersion) {
		return true
	}

	return false
}

// SetEchoprintVersion gets a reference to the given float32 and assigns it to the EchoprintVersion field.
func (o *AudioAnalysisObjectTrack) SetEchoprintVersion(v float32) {
	o.EchoprintVersion = &v
}

// GetSynchstring returns the Synchstring field value if set, zero value otherwise.
func (o *AudioAnalysisObjectTrack) GetSynchstring() string {
	if o == nil || isNil(o.Synchstring) {
		var ret string
		return ret
	}
	return *o.Synchstring
}

// GetSynchstringOk returns a tuple with the Synchstring field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudioAnalysisObjectTrack) GetSynchstringOk() (*string, bool) {
	if o == nil || isNil(o.Synchstring) {
		return nil, false
	}
	return o.Synchstring, true
}

// HasSynchstring returns a boolean if a field has been set.
func (o *AudioAnalysisObjectTrack) HasSynchstring() bool {
	if o != nil && !isNil(o.Synchstring) {
		return true
	}

	return false
}

// SetSynchstring gets a reference to the given string and assigns it to the Synchstring field.
func (o *AudioAnalysisObjectTrack) SetSynchstring(v string) {
	o.Synchstring = &v
}

// GetSynchVersion returns the SynchVersion field value if set, zero value otherwise.
func (o *AudioAnalysisObjectTrack) GetSynchVersion() float32 {
	if o == nil || isNil(o.SynchVersion) {
		var ret float32
		return ret
	}
	return *o.SynchVersion
}

// GetSynchVersionOk returns a tuple with the SynchVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudioAnalysisObjectTrack) GetSynchVersionOk() (*float32, bool) {
	if o == nil || isNil(o.SynchVersion) {
		return nil, false
	}
	return o.SynchVersion, true
}

// HasSynchVersion returns a boolean if a field has been set.
func (o *AudioAnalysisObjectTrack) HasSynchVersion() bool {
	if o != nil && !isNil(o.SynchVersion) {
		return true
	}

	return false
}

// SetSynchVersion gets a reference to the given float32 and assigns it to the SynchVersion field.
func (o *AudioAnalysisObjectTrack) SetSynchVersion(v float32) {
	o.SynchVersion = &v
}

// GetRhythmstring returns the Rhythmstring field value if set, zero value otherwise.
func (o *AudioAnalysisObjectTrack) GetRhythmstring() string {
	if o == nil || isNil(o.Rhythmstring) {
		var ret string
		return ret
	}
	return *o.Rhythmstring
}

// GetRhythmstringOk returns a tuple with the Rhythmstring field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudioAnalysisObjectTrack) GetRhythmstringOk() (*string, bool) {
	if o == nil || isNil(o.Rhythmstring) {
		return nil, false
	}
	return o.Rhythmstring, true
}

// HasRhythmstring returns a boolean if a field has been set.
func (o *AudioAnalysisObjectTrack) HasRhythmstring() bool {
	if o != nil && !isNil(o.Rhythmstring) {
		return true
	}

	return false
}

// SetRhythmstring gets a reference to the given string and assigns it to the Rhythmstring field.
func (o *AudioAnalysisObjectTrack) SetRhythmstring(v string) {
	o.Rhythmstring = &v
}

// GetRhythmVersion returns the RhythmVersion field value if set, zero value otherwise.
func (o *AudioAnalysisObjectTrack) GetRhythmVersion() float32 {
	if o == nil || isNil(o.RhythmVersion) {
		var ret float32
		return ret
	}
	return *o.RhythmVersion
}

// GetRhythmVersionOk returns a tuple with the RhythmVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudioAnalysisObjectTrack) GetRhythmVersionOk() (*float32, bool) {
	if o == nil || isNil(o.RhythmVersion) {
		return nil, false
	}
	return o.RhythmVersion, true
}

// HasRhythmVersion returns a boolean if a field has been set.
func (o *AudioAnalysisObjectTrack) HasRhythmVersion() bool {
	if o != nil && !isNil(o.RhythmVersion) {
		return true
	}

	return false
}

// SetRhythmVersion gets a reference to the given float32 and assigns it to the RhythmVersion field.
func (o *AudioAnalysisObjectTrack) SetRhythmVersion(v float32) {
	o.RhythmVersion = &v
}

func (o AudioAnalysisObjectTrack) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AudioAnalysisObjectTrack) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.NumSamples) {
		toSerialize["num_samples"] = o.NumSamples
	}
	if !isNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	if !isNil(o.SampleMd5) {
		toSerialize["sample_md5"] = o.SampleMd5
	}
	if !isNil(o.OffsetSeconds) {
		toSerialize["offset_seconds"] = o.OffsetSeconds
	}
	if !isNil(o.WindowSeconds) {
		toSerialize["window_seconds"] = o.WindowSeconds
	}
	if !isNil(o.AnalysisSampleRate) {
		toSerialize["analysis_sample_rate"] = o.AnalysisSampleRate
	}
	if !isNil(o.AnalysisChannels) {
		toSerialize["analysis_channels"] = o.AnalysisChannels
	}
	if !isNil(o.EndOfFadeIn) {
		toSerialize["end_of_fade_in"] = o.EndOfFadeIn
	}
	if !isNil(o.StartOfFadeOut) {
		toSerialize["start_of_fade_out"] = o.StartOfFadeOut
	}
	if !isNil(o.Loudness) {
		toSerialize["loudness"] = o.Loudness
	}
	if !isNil(o.Tempo) {
		toSerialize["tempo"] = o.Tempo
	}
	if !isNil(o.TempoConfidence) {
		toSerialize["tempo_confidence"] = o.TempoConfidence
	}
	if !isNil(o.TimeSignature) {
		toSerialize["time_signature"] = o.TimeSignature
	}
	if !isNil(o.TimeSignatureConfidence) {
		toSerialize["time_signature_confidence"] = o.TimeSignatureConfidence
	}
	if !isNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !isNil(o.KeyConfidence) {
		toSerialize["key_confidence"] = o.KeyConfidence
	}
	if !isNil(o.Mode) {
		toSerialize["mode"] = o.Mode
	}
	if !isNil(o.ModeConfidence) {
		toSerialize["mode_confidence"] = o.ModeConfidence
	}
	if !isNil(o.Codestring) {
		toSerialize["codestring"] = o.Codestring
	}
	if !isNil(o.CodeVersion) {
		toSerialize["code_version"] = o.CodeVersion
	}
	if !isNil(o.Echoprintstring) {
		toSerialize["echoprintstring"] = o.Echoprintstring
	}
	if !isNil(o.EchoprintVersion) {
		toSerialize["echoprint_version"] = o.EchoprintVersion
	}
	if !isNil(o.Synchstring) {
		toSerialize["synchstring"] = o.Synchstring
	}
	if !isNil(o.SynchVersion) {
		toSerialize["synch_version"] = o.SynchVersion
	}
	if !isNil(o.Rhythmstring) {
		toSerialize["rhythmstring"] = o.Rhythmstring
	}
	if !isNil(o.RhythmVersion) {
		toSerialize["rhythm_version"] = o.RhythmVersion
	}
	return toSerialize, nil
}

type NullableAudioAnalysisObjectTrack struct {
	value *AudioAnalysisObjectTrack
	isSet bool
}

func (v NullableAudioAnalysisObjectTrack) Get() *AudioAnalysisObjectTrack {
	return v.value
}

func (v *NullableAudioAnalysisObjectTrack) Set(val *AudioAnalysisObjectTrack) {
	v.value = val
	v.isSet = true
}

func (v NullableAudioAnalysisObjectTrack) IsSet() bool {
	return v.isSet
}

func (v *NullableAudioAnalysisObjectTrack) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAudioAnalysisObjectTrack(val *AudioAnalysisObjectTrack) *NullableAudioAnalysisObjectTrack {
	return &NullableAudioAnalysisObjectTrack{value: val, isSet: true}
}

func (v NullableAudioAnalysisObjectTrack) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAudioAnalysisObjectTrack) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


