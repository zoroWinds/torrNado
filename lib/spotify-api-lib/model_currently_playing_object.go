/*
Spotify Web API

You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CurrentlyPlayingObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CurrentlyPlayingObject{}

// CurrentlyPlayingObject struct for CurrentlyPlayingObject
type CurrentlyPlayingObject struct {
	Context *CurrentlyPlayingObjectContext `json:"context,omitempty"`
	// Unix Millisecond Timestamp when data was fetched
	Timestamp *int32 `json:"timestamp,omitempty"`
	// Progress into the currently playing track or episode. Can be `null`.
	ProgressMs *int32 `json:"progress_ms,omitempty"`
	// If something is currently playing, return `true`.
	IsPlaying *bool `json:"is_playing,omitempty"`
	Item *CurrentlyPlayingObjectItem `json:"item,omitempty"`
	// The object type of the currently playing item. Can be one of `track`, `episode`, `ad` or `unknown`. 
	CurrentlyPlayingType *string `json:"currently_playing_type,omitempty"`
}

// NewCurrentlyPlayingObject instantiates a new CurrentlyPlayingObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCurrentlyPlayingObject() *CurrentlyPlayingObject {
	this := CurrentlyPlayingObject{}
	return &this
}

// NewCurrentlyPlayingObjectWithDefaults instantiates a new CurrentlyPlayingObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCurrentlyPlayingObjectWithDefaults() *CurrentlyPlayingObject {
	this := CurrentlyPlayingObject{}
	return &this
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *CurrentlyPlayingObject) GetContext() CurrentlyPlayingObjectContext {
	if o == nil || isNil(o.Context) {
		var ret CurrentlyPlayingObjectContext
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrentlyPlayingObject) GetContextOk() (*CurrentlyPlayingObjectContext, bool) {
	if o == nil || isNil(o.Context) {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *CurrentlyPlayingObject) HasContext() bool {
	if o != nil && !isNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given CurrentlyPlayingObjectContext and assigns it to the Context field.
func (o *CurrentlyPlayingObject) SetContext(v CurrentlyPlayingObjectContext) {
	o.Context = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *CurrentlyPlayingObject) GetTimestamp() int32 {
	if o == nil || isNil(o.Timestamp) {
		var ret int32
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrentlyPlayingObject) GetTimestampOk() (*int32, bool) {
	if o == nil || isNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *CurrentlyPlayingObject) HasTimestamp() bool {
	if o != nil && !isNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given int32 and assigns it to the Timestamp field.
func (o *CurrentlyPlayingObject) SetTimestamp(v int32) {
	o.Timestamp = &v
}

// GetProgressMs returns the ProgressMs field value if set, zero value otherwise.
func (o *CurrentlyPlayingObject) GetProgressMs() int32 {
	if o == nil || isNil(o.ProgressMs) {
		var ret int32
		return ret
	}
	return *o.ProgressMs
}

// GetProgressMsOk returns a tuple with the ProgressMs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrentlyPlayingObject) GetProgressMsOk() (*int32, bool) {
	if o == nil || isNil(o.ProgressMs) {
		return nil, false
	}
	return o.ProgressMs, true
}

// HasProgressMs returns a boolean if a field has been set.
func (o *CurrentlyPlayingObject) HasProgressMs() bool {
	if o != nil && !isNil(o.ProgressMs) {
		return true
	}

	return false
}

// SetProgressMs gets a reference to the given int32 and assigns it to the ProgressMs field.
func (o *CurrentlyPlayingObject) SetProgressMs(v int32) {
	o.ProgressMs = &v
}

// GetIsPlaying returns the IsPlaying field value if set, zero value otherwise.
func (o *CurrentlyPlayingObject) GetIsPlaying() bool {
	if o == nil || isNil(o.IsPlaying) {
		var ret bool
		return ret
	}
	return *o.IsPlaying
}

// GetIsPlayingOk returns a tuple with the IsPlaying field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrentlyPlayingObject) GetIsPlayingOk() (*bool, bool) {
	if o == nil || isNil(o.IsPlaying) {
		return nil, false
	}
	return o.IsPlaying, true
}

// HasIsPlaying returns a boolean if a field has been set.
func (o *CurrentlyPlayingObject) HasIsPlaying() bool {
	if o != nil && !isNil(o.IsPlaying) {
		return true
	}

	return false
}

// SetIsPlaying gets a reference to the given bool and assigns it to the IsPlaying field.
func (o *CurrentlyPlayingObject) SetIsPlaying(v bool) {
	o.IsPlaying = &v
}

// GetItem returns the Item field value if set, zero value otherwise.
func (o *CurrentlyPlayingObject) GetItem() CurrentlyPlayingObjectItem {
	if o == nil || isNil(o.Item) {
		var ret CurrentlyPlayingObjectItem
		return ret
	}
	return *o.Item
}

// GetItemOk returns a tuple with the Item field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrentlyPlayingObject) GetItemOk() (*CurrentlyPlayingObjectItem, bool) {
	if o == nil || isNil(o.Item) {
		return nil, false
	}
	return o.Item, true
}

// HasItem returns a boolean if a field has been set.
func (o *CurrentlyPlayingObject) HasItem() bool {
	if o != nil && !isNil(o.Item) {
		return true
	}

	return false
}

// SetItem gets a reference to the given CurrentlyPlayingObjectItem and assigns it to the Item field.
func (o *CurrentlyPlayingObject) SetItem(v CurrentlyPlayingObjectItem) {
	o.Item = &v
}

// GetCurrentlyPlayingType returns the CurrentlyPlayingType field value if set, zero value otherwise.
func (o *CurrentlyPlayingObject) GetCurrentlyPlayingType() string {
	if o == nil || isNil(o.CurrentlyPlayingType) {
		var ret string
		return ret
	}
	return *o.CurrentlyPlayingType
}

// GetCurrentlyPlayingTypeOk returns a tuple with the CurrentlyPlayingType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrentlyPlayingObject) GetCurrentlyPlayingTypeOk() (*string, bool) {
	if o == nil || isNil(o.CurrentlyPlayingType) {
		return nil, false
	}
	return o.CurrentlyPlayingType, true
}

// HasCurrentlyPlayingType returns a boolean if a field has been set.
func (o *CurrentlyPlayingObject) HasCurrentlyPlayingType() bool {
	if o != nil && !isNil(o.CurrentlyPlayingType) {
		return true
	}

	return false
}

// SetCurrentlyPlayingType gets a reference to the given string and assigns it to the CurrentlyPlayingType field.
func (o *CurrentlyPlayingObject) SetCurrentlyPlayingType(v string) {
	o.CurrentlyPlayingType = &v
}

func (o CurrentlyPlayingObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CurrentlyPlayingObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Context) {
		toSerialize["context"] = o.Context
	}
	if !isNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	if !isNil(o.ProgressMs) {
		toSerialize["progress_ms"] = o.ProgressMs
	}
	if !isNil(o.IsPlaying) {
		toSerialize["is_playing"] = o.IsPlaying
	}
	if !isNil(o.Item) {
		toSerialize["item"] = o.Item
	}
	if !isNil(o.CurrentlyPlayingType) {
		toSerialize["currently_playing_type"] = o.CurrentlyPlayingType
	}
	return toSerialize, nil
}

type NullableCurrentlyPlayingObject struct {
	value *CurrentlyPlayingObject
	isSet bool
}

func (v NullableCurrentlyPlayingObject) Get() *CurrentlyPlayingObject {
	return v.value
}

func (v *NullableCurrentlyPlayingObject) Set(val *CurrentlyPlayingObject) {
	v.value = val
	v.isSet = true
}

func (v NullableCurrentlyPlayingObject) IsSet() bool {
	return v.isSet
}

func (v *NullableCurrentlyPlayingObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCurrentlyPlayingObject(val *CurrentlyPlayingObject) *NullableCurrentlyPlayingObject {
	return &NullableCurrentlyPlayingObject{value: val, isSet: true}
}

func (v NullableCurrentlyPlayingObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCurrentlyPlayingObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


