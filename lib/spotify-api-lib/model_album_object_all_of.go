/*
Spotify Web API

You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AlbumObjectAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlbumObjectAllOf{}

// AlbumObjectAllOf struct for AlbumObjectAllOf
type AlbumObjectAllOf struct {
	// The artists of the album. Each artist object includes a link in `href` to more detailed information about the artist. 
	Artists []ArtistObject `json:"artists,omitempty"`
	// The tracks of the album. 
	Tracks *PagingObject `json:"tracks,omitempty"`
}

// NewAlbumObjectAllOf instantiates a new AlbumObjectAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlbumObjectAllOf() *AlbumObjectAllOf {
	this := AlbumObjectAllOf{}
	return &this
}

// NewAlbumObjectAllOfWithDefaults instantiates a new AlbumObjectAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlbumObjectAllOfWithDefaults() *AlbumObjectAllOf {
	this := AlbumObjectAllOf{}
	return &this
}

// GetArtists returns the Artists field value if set, zero value otherwise.
func (o *AlbumObjectAllOf) GetArtists() []ArtistObject {
	if o == nil || isNil(o.Artists) {
		var ret []ArtistObject
		return ret
	}
	return o.Artists
}

// GetArtistsOk returns a tuple with the Artists field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlbumObjectAllOf) GetArtistsOk() ([]ArtistObject, bool) {
	if o == nil || isNil(o.Artists) {
		return nil, false
	}
	return o.Artists, true
}

// HasArtists returns a boolean if a field has been set.
func (o *AlbumObjectAllOf) HasArtists() bool {
	if o != nil && !isNil(o.Artists) {
		return true
	}

	return false
}

// SetArtists gets a reference to the given []ArtistObject and assigns it to the Artists field.
func (o *AlbumObjectAllOf) SetArtists(v []ArtistObject) {
	o.Artists = v
}

// GetTracks returns the Tracks field value if set, zero value otherwise.
func (o *AlbumObjectAllOf) GetTracks() PagingObject {
	if o == nil || isNil(o.Tracks) {
		var ret PagingObject
		return ret
	}
	return *o.Tracks
}

// GetTracksOk returns a tuple with the Tracks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlbumObjectAllOf) GetTracksOk() (*PagingObject, bool) {
	if o == nil || isNil(o.Tracks) {
		return nil, false
	}
	return o.Tracks, true
}

// HasTracks returns a boolean if a field has been set.
func (o *AlbumObjectAllOf) HasTracks() bool {
	if o != nil && !isNil(o.Tracks) {
		return true
	}

	return false
}

// SetTracks gets a reference to the given PagingObject and assigns it to the Tracks field.
func (o *AlbumObjectAllOf) SetTracks(v PagingObject) {
	o.Tracks = &v
}

func (o AlbumObjectAllOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlbumObjectAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Artists) {
		toSerialize["artists"] = o.Artists
	}
	if !isNil(o.Tracks) {
		toSerialize["tracks"] = o.Tracks
	}
	return toSerialize, nil
}

type NullableAlbumObjectAllOf struct {
	value *AlbumObjectAllOf
	isSet bool
}

func (v NullableAlbumObjectAllOf) Get() *AlbumObjectAllOf {
	return v.value
}

func (v *NullableAlbumObjectAllOf) Set(val *AlbumObjectAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableAlbumObjectAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableAlbumObjectAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlbumObjectAllOf(val *AlbumObjectAllOf) *NullableAlbumObjectAllOf {
	return &NullableAlbumObjectAllOf{value: val, isSet: true}
}

func (v NullableAlbumObjectAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlbumObjectAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


